package com.example.converter;

import java.util.ArrayList;
import java.util.List;

import org.seasar.framework.container.annotation.tiger.Binding;
import org.seasar.framework.container.annotation.tiger.BindingType;
import org.seasar.ymir.converter.TypeConversionManager;
import org.seasar.ymir.message.Messages;

import com.example.dto.HoeDto;
import com.example.dao.Hoe;
import java.util.List;

public class HoeConverterBase
{
    protected TypeConversionManager typeConversionManager_;

    protected Messages messages_;

    @Binding(bindingType = BindingType.MUST)
    final public void setConversionManager(
        TypeConversionManager typeConversionManager) {
        typeConversionManager_ = typeConversionManager;
    }

    @Binding(bindingType = BindingType.MUST)
    final public void setMessages(Messages messages) {
        messages_ = messages;
    }

    final protected TypeConversionManager getTypeConversionManager() {
        return typeConversionManager_;
    }

    final protected Messages getMessages() {
        return messages_;
    }

    final protected <T> T convert(Object value, Class<T> type) {
        return typeConversionManager_.convert(value, type);
    }

    final protected String valueOf(Object obj) {
        if (obj == null) {
            return null;
        }
        return String.valueOf(obj);
    }

    final protected boolean isEmpty(Object obj) {
        return (obj == null || obj instanceof String
            && ((String) obj).trim().length() == 0);
    }

    final protected <T> T emptyToNull(T obj) {
        if (isEmpty(obj)) {
            return null;
        } else {
            return obj;
        }
    }

    public HoeDto copyTo(HoeDto dto, Hoe<List> entity)
    {
        copyAaaTo(dto, entity);
        copyCccTo(dto, entity);
        copyEeeTo(dto, entity);

        return dto;
    }

    public HoeDto[] copyTo(Hoe<List>[] entities)
    {
        HoeDto[] dtos = new HoeDto[entities.length];
        for (int i = 0; i < entities.length; i++) {
            dtos[i] = copyTo(new HoeDto(), entities[i]);
        }
        return dtos;
    }

    public List<HoeDto> copyToDtoList(List<Hoe<List>> entityList)
    {
        List<HoeDto> dtoList = new ArrayList<HoeDto>();
        for (Hoe<List> entity : entityList) {
            dtoList.add(copyTo(new HoeDto(), entity));
        }
        return dtoList;
    }

    protected void copyAaaTo(HoeDto dto, Hoe<List> entity)
    {
        dto.setAaa(convert(entity.getAaa(), String.class));
    }

    protected void copyCccTo(HoeDto dto, Hoe<List> entity)
    {
        dto.setCcc(convert(entity.isCcc(), String.class));
    }

    protected void copyEeeTo(HoeDto dto, Hoe<List> entity)
    {
        dto.setEee(convert(entity.getEee(), String.class));
    }

    public Hoe<List> copyTo(Hoe<List> entity, HoeDto dto)
    {
        copyAaaTo(entity, dto);
        copyBbbTo(entity, dto);
        copyDddTo(entity, dto);

        return entity;
    }

    public Hoe<List>[] copyTo(HoeDto[] dtos)
    {
        @SuppressWarnings("unchecked")
        Hoe<List>[] entities = new Hoe[dtos.length];
        for (int i = 0; i < dtos.length; i++) {
            entities[i] = copyTo(new Hoe<List>(), dtos[i]);
        }
        return entities;
    }

    public List<Hoe<List>> copyToEntityList(List<HoeDto> dtoList)
    {
        List<Hoe<List>> entityList = new ArrayList<Hoe<List>>();
        for (HoeDto dto : dtoList) {
            entityList.add(copyTo(new Hoe<List>(), dto));
        }
        return entityList;
    }

    protected void copyAaaTo(Hoe<List> entity, HoeDto dto)
    {
        entity.setAaa(convert(dto.getAaa(), String.class));
    }

    protected void copyBbbTo(Hoe<List> entity, HoeDto dto)
    {
        entity.setBbb(convert(dto.isBbb(), String.class));
    }

    protected void copyDddTo(Hoe<List> entity, HoeDto dto)
    {
        entity.setDdd(convert(dto.getDdd(), String.class));
    }

}
