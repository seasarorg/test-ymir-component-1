package com.example.converter;

import java.util.ArrayList;
import java.util.List;

import org.seasar.framework.container.annotation.tiger.Binding;
import org.seasar.framework.container.annotation.tiger.BindingType;
import org.seasar.ymir.converter.TypeConversionManager;
import org.seasar.ymir.message.Messages;

import com.example.dao.Hoe;
import com.example.dto.HoeDto;

/**
 * A class to convert Dto objects and entity objects.
 * <p>Developer can override methods to customize this class's behavior,
 * and add methods to gain conversion ability.
 * </p>
 */
public class HoeConverterBase {
    protected TypeConversionManager typeConversionManager_;

    protected Messages messages_;

    @Binding(bindingType = BindingType.MUST)
    final public void setConversionManager(
        TypeConversionManager typeConversionManager) {
        typeConversionManager_ = typeConversionManager;
    }

    @Binding(bindingType = BindingType.MUST)
    final public void setMessages(Messages messages) {
        messages_ = messages;
    }

    /**
     * Gets TypeConversionManager.
     * <p>Gets a TypeConversionManager instance to convert types of object.
     * </p>
     * 
     * @return A TypeConversionManager instance.
     */
    final protected TypeConversionManager getTypeConversionManager() {
        return typeConversionManager_;
    }

    /**
     * Gets Messages.
     * <p>Gets a Messages instance to localize messages represented by keys.
     * </p>
     * 
     * @return A Messages instance.
     */
    final protected Messages getMessages() {
        return messages_;
    }

    /**
     * Converts object by specified type.
     * <p>Converts object by specified type using TypeConversionManager.
     * </p>
     * 
     * @param value Source object.
     * @param type Destination type.
     * @return Conversion result.
     */
    protected <T> T convert(Object value, Class<T> type) {
        return typeConversionManager_.convert(value, type);
    }

    /**
     * Converts object for entity by specified type.
     * <p>This method is used in order to set converted objects to entities.
     * You can change behavior of this method by overriding this method.
     * </p>
     * 
     * @param value source object.
     * @param type destination type.
     * @return conversion result.
     */
    protected <T> T convertForEntity(Object value, Class<T> type) {
        return typeConversionManager_.convert(value, type);
    }

    /**
     * Gets String representation of object.
     * <p>Gets String representation of specified object.
     * If the object is null, null is returned.
     * </p>
     * 
     * @param obj Source object.
     * @return String representation.
     */
    final protected String valueOf(Object obj) {
        if (obj == null) {
            return null;
        }
        return String.valueOf(obj);
    }

    /**
     * Returns whether object is empty or not.
     * <p>Returns whether specified object is empty or not.
     * 'Empty' means that a object is null or 0-length String.
     * </p>
     *  
     * @param obj Target object.
     * @return Whether object is empty or not.
     */
    protected boolean isEmpty(Object obj) {
        return (obj == null || obj instanceof String
            && ((String) obj).trim().length() == 0);
    }

    /**
     * Converts null if object is empty.
     * <p>Converts null if specified object is empty.
     * 'Empty' means that a object is null or 0-length String.
     * </p>
     *  
     * @param obj Target object.
     * @return Original object, or null if it is empty.
     */
    protected <T> T emptyToNull(T obj) {
        if (isEmpty(obj)) {
            return null;
        } else {
            return obj;
        }
    }

    /**
     * Copies Hoe<List> entity to HoeDto instance.
     * <p>This methods copies the following properties automatically:</p>
     * <ul>
     *   <li>aaa</li>
     *   <li>ccc</li>
     *   <li>eee</li>
     *   <li>fff</li>
     *   <li>ggg</li>
     * </ul>
     * 
     * @param entity Source object.
     * @param dto Destination object.
     * @return Dto given as the second argument of this method.
     */
    public HoeDto copyEntityToDto(Hoe<List> entity, HoeDto dto) {
        reflectAaaToDto(entity, dto);
        reflectCccToDto(entity, dto);
        reflectEeeToDto(entity, dto);
        reflectFffToDto(entity, dto);
        reflectGggToDto(entity, dto);

        return dto;
    }

    /**
     * Copies a List of Hoe<List> entity to a List of HoeDto.
     * <p>This methods copies the following properties automatically:</p>
     * <ul>
     *   <li>aaa</li>
     *   <li>ccc</li>
     *   <li>eee</li>
     *   <li>fff</li>
     *   <li>ggg</li>
     * </ul>
     * 
     * @param entityList Source List.
     * @return Copied List of Dto.
     */
    public List<HoeDto> toDtoList(List<Hoe<List>> entityList) {
        List<HoeDto> dtoList = new ArrayList<HoeDto>();
        for (Hoe<List> entity : entityList) {
            dtoList.add(copyEntityToDto(entity, new HoeDto()));
        }
        return dtoList;
    }

    /**
     * Copies 'aaa' property of Hoe<List> entity to HoeDto instance's 'aaa' property.
     * 
     * @param entity Source object.
     * @param dto Destination object.
     */
    protected void reflectAaaToDto(Hoe<List> entity, HoeDto dto) {
        dto.setAaa(extractAaaFromEntity(entity));
    }

    /**
     * Extracts 'aaa' property of Hoe<List> entity in order to copy to HoeDto instance's 'aaa' property.
     * 
     * @param entity Source object.
     * @return Extracted value.
     */
    protected String extractAaaFromEntity(Hoe<List> entity) {
        return convert(entity.getAaa(), String.class);
    }

    /**
     * Copies 'ccc' property of Hoe<List> entity to HoeDto instance's 'ccc' property.
     * 
     * @param entity Source object.
     * @param dto Destination object.
     */
    protected void reflectCccToDto(Hoe<List> entity, HoeDto dto) {
        dto.setCcc(extractCccFromEntity(entity));
    }

    /**
     * Extracts 'ccc' property of Hoe<List> entity in order to copy to HoeDto instance's 'ccc' property.
     * 
     * @param entity Source object.
     * @return Extracted value.
     */
    protected String extractCccFromEntity(Hoe<List> entity) {
        return convert(entity.isCcc(), String.class);
    }

    /**
     * Copies 'eee' property of Hoe<List> entity to HoeDto instance's 'eee' property.
     * 
     * @param entity Source object.
     * @param dto Destination object.
     */
    protected void reflectEeeToDto(Hoe<List> entity, HoeDto dto) {
        dto.setEee(extractEeeFromEntity(entity));
    }

    /**
     * Extracts 'eee' property of Hoe<List> entity in order to copy to HoeDto instance's 'eee' property.
     * 
     * @param entity Source object.
     * @return Extracted value.
     */
    protected String extractEeeFromEntity(Hoe<List> entity) {
        return convert(entity.getEee(), String.class);
    }

    /**
     * Copies 'fff' property of Hoe<List> entity to HoeDto instance's 'fffSelector' property.
     * 
     * @param entity Source object.
     * @param dto Destination object.
     */
    protected void reflectFffToDto(Hoe<List> entity, HoeDto dto) {
        dto.getFffSelector().setSelectedValue(extractFffFromEntity(entity));
    }

    /**
     * Extracts 'fff' property of Hoe<List> entity in order to copy to HoeDto instance's 'fffSelector' property.
     * 
     * @param entity Source object.
     * @return Extracted value.
     */
    protected String extractFffFromEntity(Hoe<List> entity) {
        return convert(entity.getFff(), String.class);
    }

    /**
     * Copies 'ggg' property of Hoe<List> entity to HoeDto instance's 'gggSelect' property.
     * 
     * @param entity Source object.
     * @param dto Destination object.
     */
    protected void reflectGggToDto(Hoe<List> entity, HoeDto dto) {
        dto.getGggSelect().setSelectedValue(extractGggFromEntity(entity));
    }

    /**
     * Extracts 'ggg' property of Hoe<List> entity in order to copy to HoeDto instance's 'gggSelect' property.
     * 
     * @param entity Source object.
     * @return Extracted value.
     */
    protected String extractGggFromEntity(Hoe<List> entity) {
        return convert(entity.getGgg(), String.class);
    }

    /**
     * Copies HoeDto entity to Hoe<List> instance.
     * <p>This methods copies the following properties automatically:</p>
     * <ul>
     *   <li>aaa</li>
     *   <li>bbb</li>
     *   <li>ddd</li>
     *   <li>fff</li>
     *   <li>ggg</li>
     * </ul>
     * 
     * @param dto Source object.
     * @param entity Destination object.
     * @return Entity given as the second argument of this method.
     */
    public Hoe<List> copyDtoToEntity(HoeDto dto, Hoe<List> entity) {
        reflectAaaToEntity(dto, entity);
        reflectBbbToEntity(dto, entity);
        reflectDddToEntity(dto, entity);
        reflectFffToEntity(dto, entity);
        reflectGggToEntity(dto, entity);

        return entity;
    }

    /**
     * Copies a List of HoeDto entity to a List of Hoe<List>.
     * <p>This methods copies the following properties automatically:</p>
     * <ul>
     *   <li>aaa</li>
     *   <li>bbb</li>
     *   <li>ddd</li>
     *   <li>fff</li>
     *   <li>ggg</li>
     * </ul>
     * 
     * @param dtoList Source List.
     * @return Copied List of entity.
     */
    public List<Hoe<List>> toEntityList(List<HoeDto> dtoList) {
        List<Hoe<List>> entityList = new ArrayList<Hoe<List>>();
        for (HoeDto dto : dtoList) {
            entityList.add(copyDtoToEntity(dto, new Hoe<List>()));
        }
        return entityList;
    }

    /**
     * Copies 'aaa' property of HoeDto entity to Hoe<List> instance's 'aaa' property.
     * 
     * @param dto Source object.
     * @param entity Destination object.
     */
    protected void reflectAaaToEntity(HoeDto dto, Hoe<List> entity) {
        entity.setAaa(extractAaaFromDto(dto));
    }

    /**
     * Extracts 'aaa' property of HoeDto entity in order to copy to Hoe<List> instance's 'aaa' property.
     * 
     * @param dto Source object.
     * @return Extracted value.
     */
    protected String extractAaaFromDto(HoeDto dto) {
        return convertForEntity(dto.getAaa(), String.class);
    }

    /**
     * Copies 'bbb' property of HoeDto entity to Hoe<List> instance's 'bbb' property.
     * 
     * @param dto Source object.
     * @param entity Destination object.
     */
    protected void reflectBbbToEntity(HoeDto dto, Hoe<List> entity) {
        entity.setBbb(extractBbbFromDto(dto));
    }

    /**
     * Extracts 'bbb' property of HoeDto entity in order to copy to Hoe<List> instance's 'bbb' property.
     * 
     * @param dto Source object.
     * @return Extracted value.
     */
    protected String extractBbbFromDto(HoeDto dto) {
        return convertForEntity(dto.isBbb(), String.class);
    }

    /**
     * Copies 'ddd' property of HoeDto entity to Hoe<List> instance's 'ddd' property.
     * 
     * @param dto Source object.
     * @param entity Destination object.
     */
    protected void reflectDddToEntity(HoeDto dto, Hoe<List> entity) {
        entity.setDdd(extractDddFromDto(dto));
    }

    /**
     * Extracts 'ddd' property of HoeDto entity in order to copy to Hoe<List> instance's 'ddd' property.
     * 
     * @param dto Source object.
     * @return Extracted value.
     */
    protected String extractDddFromDto(HoeDto dto) {
        return convertForEntity(dto.getDdd(), String.class);
    }

    /**
     * Copies 'fffSelector' property of HoeDto entity to Hoe<List> instance's 'fff' property.
     * 
     * @param dto Source object.
     * @param entity Destination object.
     */
    protected void reflectFffToEntity(HoeDto dto, Hoe<List> entity) {
        entity.setFff(extractFffFromDto(dto));
    }

    /**
     * Extracts 'fffSelector' property of HoeDto entity in order to copy to Hoe<List> instance's 'fff' property.
     * 
     * @param dto Source object.
     * @return Extracted value.
     */
    protected String extractFffFromDto(HoeDto dto) {
        return convertForEntity(dto.getFffSelector().getSelectedValue(), String.class);
    }

    /**
     * Copies 'gggSelect' property of HoeDto entity to Hoe<List> instance's 'ggg' property.
     * 
     * @param dto Source object.
     * @param entity Destination object.
     */
    protected void reflectGggToEntity(HoeDto dto, Hoe<List> entity) {
        entity.setGgg(extractGggFromDto(dto));
    }

    /**
     * Extracts 'gggSelect' property of HoeDto entity in order to copy to Hoe<List> instance's 'ggg' property.
     * 
     * @param dto Source object.
     * @return Extracted value.
     */
    protected String extractGggFromDto(HoeDto dto) {
        return convertForEntity(dto.getGggSelect().getSelectedValue(), String.class);
    }

}
