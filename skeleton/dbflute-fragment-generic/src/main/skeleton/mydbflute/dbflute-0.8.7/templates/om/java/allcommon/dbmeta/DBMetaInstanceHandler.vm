${database.allClassCopyright}package ${glPackageBaseCommonDBMeta};

#set ($myClassName = "${glDBMetaInstanceHandlerName}")
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.lang.reflect.Method;

import ${glPackageBaseCommonHelper}.${glStringKeyMap};
import ${glPackageBaseCommonUtil}.${glSimpleAssertUtil};

/**
 * The instance handler of DB meta.
 * @author ${database.ClassAuthor}
 */
public class ${myClassName} {

    // ===================================================================================
    //                                                                          Definition
    //                                                                          ==========
    /** Log-instance. */
    private static final org.apache.commons.logging.Log _log = org.apache.commons.logging.LogFactory.getLog(${myClassName}.class);

    // ===================================================================================
    //                                                                        Resource Map
    //                                                                        ============
    /** Table DB-name instance map. */
    protected static final Map<String, ${glDBMetaInterfaceName}> _tableDbNameInstanceMap = newConcurrentHashMap();

    /** The map of table DB name and class name. This is for initialization. */
    protected static final Map<String, String> _tableDbNameClassNameMap = newConcurrentHashMap();
    
    /** The flexible map of table DB name. This is for conversion at finding. */
    protected static final Map<String, String> _tableDbNameFlexibleMap = ${glStringKeyMap}.createAsFlexibleConcurrent();
    
    /** The count of setting up resources of DB meta for internal information. */
    protected static int setupCount = 0; 

    /**
     * Set up the resource of DBMeta. Lock this class.
     * @param tableDbNameClassNameMap The map of table DB name and class name. (NotNull)
     */
    public static synchronized void setupDBMetaResource(Map<String, String> tableDbNameClassNameMap) {
        if (tableDbNameClassNameMap == null) {
            String msg = "The argument 'tableDbNameClassNameMap' should not be null";
            msg = msg + " at ${myClassName}.setupDBMetaResource()";
            throw new IllegalArgumentException(msg);
        }
        if (tableDbNameClassNameMap.isEmpty()) {
            String msg = "The argument 'tableDbNameClassNameMap' should not be empty";
            msg = msg + " at ${myClassName}.setupDBMetaResource()";
            throw new IllegalArgumentException(msg);
        }
        final String firstMsg = "...Setting up resources of DB meta";
        final int tableCount = tableDbNameClassNameMap.size();
        if (setupCount == 0) {
            _log.info(firstMsg + ": tables=" + tableCount); // basically here
        } else {
            _log.info(firstMsg + " AGAIN(" + (setupCount + 1) + " times): tables=" + tableCount);
        }
        _tableDbNameInstanceMap.clear();
        _tableDbNameClassNameMap.clear();
        _tableDbNameFlexibleMap.clear();
        final Set<String> tableDbNameSet = tableDbNameClassNameMap.keySet();
        for (String tableDbName : tableDbNameSet) {
            final String className = tableDbNameClassNameMap.get(tableDbName);
            _tableDbNameClassNameMap.put(tableDbName, className);
            _tableDbNameFlexibleMap.put(tableDbName, tableDbName);
        }
        ++setupCount;
    }

    /**
     * @return The initialized map that contains all instances of DB meta. (NotNull & NotEmpty)
     */
    public static Map<String, ${glDBMetaInterfaceName}> getDBMetaMap() {
        initializeDBMetaMap();
        return _tableDbNameInstanceMap;
    }
    
    protected static void initializeDBMetaMap() {
        if (isInitialized()) {
            return;
        }
        final Set<String> tableDbNameSet = _tableDbNameClassNameMap.keySet();
        for (String tableDbName : tableDbNameSet) {
            findDBMeta(tableDbName); // Initialize!
        }
        if (!isInitialized()) {
            String msg = "Failed to initialize tableDbNameInstanceMap:";
            msg = msg + " tableDbNameInstanceMap=" + _tableDbNameInstanceMap;
            throw new IllegalStateException(msg);
        }
    }

    protected static boolean isInitialized() {
        return _tableDbNameInstanceMap.size() == _tableDbNameClassNameMap.size();
    }

    // ===================================================================================
    //                                                                         Main Method
    //                                                                         ===========
    /**
     * Find DB meta by table flexible name.
     * <pre>
     * If the table name is 'ORDER_DETAIL', you can find the DB meta by ...(as follows)
     *     'ORDER_DETAIL', 'ORDer_DeTAiL', 'order_detail'
     *     , 'OrderDetail', 'orderdetail', 'oRderDetaIl'
     * </pre>
     * @param tableFlexibleName The flexible name of table. (NotNull)
     * @return The instance of DB meta. (NotNull)
     * @exception DBMetaNotFoundException When the DB meta is not found.
     */
    public static ${glDBMetaInterfaceName} findDBMeta(String tableFlexibleName) {
        assertStringNotNullAndNotTrimmedEmpty("tableFlexibleName", tableFlexibleName);
        final int dotLastIndex = tableFlexibleName.lastIndexOf(".");
        if (dotLastIndex >= 0) {
            tableFlexibleName = tableFlexibleName.substring(dotLastIndex + ".".length());
        }
        final String tableDbName = _tableDbNameFlexibleMap.get(tableFlexibleName);
        if (tableDbName != null) {
            return byTableDbName(tableDbName);
        }
        String msg = "The instance map returned null by the key: key=" + tableFlexibleName + " instanceMap=" + _tableDbNameInstanceMap;
        throw new DBMetaNotFoundException(msg);
    }

    public static class DBMetaNotFoundException extends IllegalStateException {
        private static final long serialVersionUID = 1L;
        public DBMetaNotFoundException(String msg) {
            super(msg);
        }
    }

    /**
     * Get instance by table DB-name.
     * @param tableDbName Table DB-name. (NotNull)
     * @return Instance. (NotNull)
     */
    protected static ${glDBMetaInterfaceName} byTableDbName(String tableDbName) {
        assertStringNotNullAndNotTrimmedEmpty("tableDbName", tableDbName);
        ${glDBMetaInterfaceName} instance = getCachedDBMeta(tableDbName);
        if (instance == null) {
            String msg = "The instance map returned null by the key:";
            msg = msg + " key=" + tableDbName + " instanceMap=" + _tableDbNameInstanceMap;
            throw new DBMetaNotFoundException(msg);
        }
        return instance;
    }
    
    protected static ${glDBMetaInterfaceName} getCachedDBMeta(String tableName) {// For lazy-load! Thank you koyak!
        if (_tableDbNameInstanceMap.containsKey(tableName)) {
            return _tableDbNameInstanceMap.get(tableName);
        }
        synchronized (_tableDbNameInstanceMap) {
            if (_tableDbNameInstanceMap.containsKey(tableName)) {
                return _tableDbNameInstanceMap.get(tableName);
            }
            String entityName = _tableDbNameClassNameMap.get(tableName);
            _tableDbNameInstanceMap.put(tableName, getDBMeta(entityName));
        }
        return _tableDbNameInstanceMap.get(tableName);
    }

    protected static ${glDBMetaInterfaceName} getDBMeta(String className) {
        try {
            Class<?> clazz = Class.forName(className);
            Method methoz = clazz.getMethod("getInstance", (Class[])null);
            Object result = methoz.invoke(null, (Object[])null);
            return (${glDBMetaInterfaceName})result;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    // ===================================================================================
    //                                                                      General Helper
    //                                                                      ==============
    protected static <KEY, VALUE> ConcurrentHashMap<KEY, VALUE> newConcurrentHashMap() {
        return new ConcurrentHashMap<KEY, VALUE>();
    }

    // -----------------------------------------------------
    //                                         Assert Object
    //                                         -------------
    protected static void assertObjectNotNull(String variableName, Object value) {
        ${glSimpleAssertUtil}.assertObjectNotNull(variableName, value);
    }

    // -----------------------------------------------------
    //                                         Assert String
    //                                         -------------
    protected static void assertStringNotNullAndNotTrimmedEmpty(String variableName, String value) {
        ${glSimpleAssertUtil}.assertStringNotNullAndNotTrimmedEmpty(variableName, value);
    }
}
