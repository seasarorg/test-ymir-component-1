${database.allClassCopyright}package ${glPackageBaseCommonBhvCore};

import java.util.Collections;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import javax.sql.XADataSource;

import org.seasar.extension.dbcp.impl.XADataSourceImpl;

import ${glPackageBaseCommon}.${glDBDef};
import ${glPackageBaseCommon}.${glDBFluteConfig};
import ${glPackageBaseCommonDBMeta}.${glDBMetaInstanceHandlerName};
import ${glPackageBaseCommonCBean}.${glConditionBeanContextName};
import ${glPackageBaseCommonS2DaoInternalSqlLog}.${glInternalSqlLogRegistry};
import ${glPackageBaseCommonUtil}.${glSimpleSystemUtil};

/**
 * @author ${database.ClassAuthor}
 */
public class ${glBehaviorInitializer} {

    // ===================================================================================
    //                                                                          Definition
    //                                                                          ==========
    /** Log-instance. */
    private static final org.apache.commons.logging.Log _log = org.apache.commons.logging.LogFactory.getLog(${glBehaviorInitializer}.class);

    // -----------------------------------------------------
    //                                            For DBMeta
    //                                            ----------
    /** The map of table DB name and class name for the handler of DB meta instance. */
    protected static final Map<String, String> _tableDbNameClassNameMap;
    static {
        final Map<String, String> tmpMap = newConcurrentHashMap();
#foreach ($table in $database.tables)
        tmpMap.put("${table.name}", "${table.DBMetaFullClassName}");
#end
        _tableDbNameClassNameMap = Collections.unmodifiableMap(tmpMap);
    }

    protected static <KEY, VALUE> ConcurrentHashMap<KEY, VALUE> newConcurrentHashMap() {
        return new ConcurrentHashMap<KEY, VALUE>();
    }

    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    /**
     * Constructor. And initialize various components related behavior.
     * @param xaDataSource The data source of XA. (Nullable)
     */
    public ${glBehaviorInitializer}(XADataSource xaDataSource) {
        _log.info("/* * * * * * * * * * * * * * * * * * * * * * * * * * * * {DBFlute}");
        initializeDBMetaResource();
        handleSqlLogRegistry();
        loadCoolClasses();
        if (xaDataSource != null) {
            showInformation(xaDataSource);
            setupDBDefByDriverClassName(xaDataSource);
        }
        ${glDBFluteConfig}.getInstance().lock();
        _log.info("* * * * */");
    }

    // ===================================================================================
    //                                                                              DBMeta
    //                                                                              ======
    protected void initializeDBMetaResource() {
        ${glDBMetaInstanceHandlerName}.setupDBMetaResource(_tableDbNameClassNameMap);
    }

    // ===================================================================================
    //                                                                        Cool Classes
    //                                                                        ============
    protected void loadCoolClasses() { // for S2Container basically 
        ${glConditionBeanContextName}.loadCoolClasses(); // Against the ClassLoader Headache!
    }

    // ===================================================================================
    //                                                                         Information
    //                                                                         ===========
    protected void showInformation(XADataSource xaDataSource) {
        if (xaDataSource != null && xaDataSource instanceof XADataSourceImpl) {
            final StringBuilder sb = new StringBuilder();
            final XADataSourceImpl xaDataSourceImpl = (XADataSourceImpl)xaDataSource;
            final String driverClassName = xaDataSourceImpl.getDriverClassName();
            final String url = xaDataSourceImpl.getURL();
            final String user = xaDataSourceImpl.getUser();
            sb.append("  [XADataSource]:").append(getLineSeparator());
            sb.append("    driver = " + driverClassName).append(getLineSeparator());
            sb.append("    url    = " + url).append(getLineSeparator());
            sb.append("    user   = " + user);
            _log.info("{Injection Information}" + getLineSeparator() + sb);
        }
    }

    // ===================================================================================
    //                                                               Database Product Name
    //                                                               =====================
    protected void setupDBDefByDriverClassName(XADataSource xaDataSource) {
        if (xaDataSource != null && xaDataSource instanceof XADataSourceImpl) {
            final XADataSourceImpl xaDataSourceImpl = (XADataSourceImpl)xaDataSource;
            final String driverClassName = xaDataSourceImpl.getDriverClassName();
            final ${glDBDef} dbdef = ${glDBDef}.byDriverClassName(driverClassName);
            if (dbdef != null) {
                ${glDBDef}.setCurrentDef(dbdef);
                return;
            }
        }
    }

    // ===================================================================================
    //                                                                    SQL Log Registry
    //                                                                    ================
    protected void handleSqlLogRegistry() {
        if (${glDBFluteConfig}.getInstance().isUseSqlLogRegistry()) {
            final StringBuilder sb = new StringBuilder();
            sb.append("{SqlLog Information}").append(getLineSeparator());
            sb.append("  [SqlLogRegistry]").append(getLineSeparator());
            if (${glInternalSqlLogRegistry}.setupSqlLogRegistry()) {
                sb.append("    ...Setting up SqlLogRegistry(org.seasar.extension.jdbc)!").append(getLineSeparator());
                sb.append("    Because the property 'useSqlLogRegistry' of the config of DBFlute is true.");
            } else {
                sb.append("    SqlLogRegistry(org.seasar.extension.jdbc) is not supported at the version!");
            }
           _log.info(sb);
        } else {
            final Object sqlLogRegistry = ${glInternalSqlLogRegistry}.findContainerSqlLogRegistry();
            if (sqlLogRegistry != null) {
                ${glInternalSqlLogRegistry}.closeRegistration();
            }
        }
    }

    // ===================================================================================
    //                                                                      General Helper
    //                                                                      ==============
    protected String getLineSeparator() {
        return ${glSimpleSystemUtil}.getLineSeparator();
    }
}
