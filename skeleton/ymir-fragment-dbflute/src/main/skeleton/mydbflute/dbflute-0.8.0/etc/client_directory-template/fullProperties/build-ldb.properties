# =======================================================================================
#                                                                                 for All
#                                                                                 =======

# -------------------------------------------------------------------
#  P R O J E C T
# -------------------------------------------------------------------
# @FirstProperty
# @Required
torque.project = ldb

# -------------------------------------------------------------------
#  T A R G E T  D A T A B A S E
# -------------------------------------------------------------------
# This is the target database, only considered when generating
# the SQL for your Torque project. Your possible choices are:
#
#   axion, cloudscape, db2, db2400, hypersonic, interbase, mssql,
#   mysql, oracle, postgresql, sapdb, sybase, firebird, derby
# -------------------------------------------------------------------
# @FirstProperty
# @Required
torque.database = derby

# -------------------------------------------------------------------
#  T A R G E T  L A N G U A G E
# -------------------------------------------------------------------
# (Default 'java')
#   The target language. Your possible choices are:
#     java, csharp
# -------------------------------------------------------------------
# @FirstProperty
#torque.targetLanguage = java
#torque.targetLanguageVersion = 6.0

# -------------------------------------------------------------------
#  T E M P L A T E  E N C O D I N G
# -------------------------------------------------------------------
# (Default 'UTF-8')
#   The encoding of Velocity template file.
# -------------------------------------------------------------------
#torque.templateFileEncoding = UTF-8

# -------------------------------------------------------------------
#  S O U R C E  F I L E  E N C O D I N G
# -------------------------------------------------------------------
# (Default 'UTF-8')
#   The encoding of source file.
# -------------------------------------------------------------------
#torque.sourceFileEncoding = UTF-8



# ========================================================================================
#                                                                              for OM task
#                                                                              ===========

# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
#                                                            Basic
#                                                         _/_/_/_/
# /---------------------------------------------------------------------------
# [Output Directory]
#   java.dir: (Default Java:'../src/main/java' CSharp:'../source')
#     The base output directory.
#
#   *Java Project Style
#     If this value is '../src/main/java' and your project type is under maven,
#     you don't need to set up this property!
#
#     {app-project}
#         |
#         |-dbflute_[project]
#         |       |-build-[project].properties
#         |       |-...
#         |
#         |-src/main/java         // *Here!
#         |-src/main/resources
#         |-...
#
#   *CSharp Project Style
#     [app-solution]/dbflute_[project]/build-[project].properties
#     [app-solution]/mydbflute/dbflute-0.6.0
#     [app-solution]/source/[app-solution].sln
#     [app-solution]/source/[app-project(top-namespace)]/[part-namespace]/AllCommon
#     [app-solution]/source/[app-project(top-namespace)]/[part-namespace]/BsBhv
#     [app-solution]/source/[app-project(top-namespace)]/[part-namespace]/...
#     [app-solution]/source/[app-project(top-namespace)]/Resources/DBFlute.dicon
#     [app-solution]/source/[app-project(top-namespace)]/Resources/Ado.dicon
#
# @FirstProperty
#torque.java.dir = ../src/main/java
# ----------------/

# /---------------------------------------------------------------------------
# [Class Author]
#   classAuthor: (Default 'DBFlute(AutoGenerator)')
#     The value of the author tag in class javadoc.
#     All classes are target.
#
#torque.classAuthor = DBFlute(AutoGenerator)
# ----------------/

# /---------------------------------------------------------------------------
# [All Class Copyright]
#   allClassCopyright: (Default '')
#     The value of the copyright in class header.
#     All classes are target.
#
# @OutsidePropertyOnly -- Please use the file './dfprop/allClassCopyright.dfprop'!
#torque.allClassCopyright = ...
# ----------------/

# /---------------------------------------------------------------------------
# [Naming]
#   isJavaNameOfTableSameAsDbName: (Default 'false')
#     [true]
#       Java name of table is same as db name.
#         ex) If the table name is 'OrderDetail', then the java name is 'OrderDetail'.
# 
#     [false]
#         ex) If the table name is 'ORDER_DETAIL', then the java name is 'OrderDetail'.
#         ex) If the table name is 'OrderDetail', then the java name is 'Orderdetail'.
#
#   isJavaNameOfColumnSameAsDbName: (Default 'false')
#     [true]
#       Java name of column is same as db name.
#         ex) If the table name is 'OrderDetail', then the java name is 'OrderDetail'.
# 
#     [false]
#         ex) If the table name is 'ORDER_DETAIL', then the java name is 'OrderDetail'.
#         ex) If the table name is 'OrderDetail', then the java name is 'Orderdetail'.
#
# @FirstProperty
#torque.isJavaNameOfTableSameAsDbName = false
#
# @FirstProperty
#torque.isJavaNameOfColumnSameAsDbName = false
# ----------------/

# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
#                                                           Prefix
#                                                         _/_/_/_/
# /---------------------------------------------------------------------------
# [PrefixAndSuffix]
#   projectPrefix: (Default null)
#     If the property is 'Ld', all class names are 'LdXxx'.
#
# @FirstProperty
torque.projectPrefix = Ld
# ----------------/

# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
#                                                            Dicon
#                                                             _/_/
# /---------------------------------------------------------------------------
# [Dicon Basic Information]
#   dbfluteDiconNamespace: (Default Java:'dbflute' CSharp:'DBFlute')
#     The namespace of dbflute dicon.
#
#   dbfluteDiconPackageName: (Default Java:'../resources' CSharp:'../source/${topNamespace}/Resources')
#     The package name of dbflute dicon.
#
#   dbfluteDiconFileName: (Default Java:'dbflute.dicon' CSharp:'DBFlute.dicon')
#     The file name of dbflute dicon. (Required)
#
#   j2eeDiconResourceName: (Default Java:'j2ee.dicon' CSharp:'Ado.dicon')
#     The resource name of J2EE dicon.
#
#   *Attension:
#      It is necessary that main dicon of application includes dbflute dicon.
#      ex) App dicon includes dbflute dicon.
#
# @FirstProperty
#torque.dbfluteDiconNamespace		= dbflute
#torque.dbfluteDiconPackageName		= ../resources
#torque.dbfluteDiconFileName		= dbflute.dicon
torque.j2eeDiconResourceName		= j2ee-ldb.dicon
# ----------------/

# /---------------------------------------------------------------------------
# [Dicon Adjustment Information]
#
#   dbfluteDiconBeforeJ2eeIncludeDefinitionMap: (Default 'map:{}')
#     The definition map of dbflute dicon include path before j2ee including.
#     ex) map:{ dbflute/jdbc-xxx.dicon = dummy }
#
#   dbfluteDiconOtherIncludeDefinitionMap: (Default 'map:{}')
#     The definition map of dbflute dicon other include path.
#     ex) map:{ dbflute/common.dicon = dummy }
#
#
#torque.dbfluteDiconBeforeJ2eeIncludeDefinitionMap = map:{}
#torque.dbfluteDiconOtherIncludeDefinitionMap = map:{}
# ----------------/

# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
#                                                          Package
#                                                             _/_/
# /---------------------------------------------------------------------------
# [EntityDao Package]
#    packageBase: (Default '')
#      The base directory of package.
#
#      *If this property is specified and other package properties is not specified, 
#       Then The packages of generated class are as follows:
#
#        ex) packageBase = org.seasar.dbflute.example.dbflute.ldb
#              baseCommonPackage       --> org.seasar.dbflute.example.dbflute.ldb.allcommon
#              baseBehaviorPackage     --> org.seasar.dbflute.example.dbflute.ldb.bsbhv
#              baseDaoPackage          --> org.seasar.dbflute.example.dbflute.ldb.bsdao
#              baseEntityPackage       --> org.seasar.dbflute.example.dbflute.ldb.bsentity
#              conditionBeanPackage    --> org.seasar.dbflute.example.dbflute.ldb.cbean
#              extendedBehaviorPackage --> org.seasar.dbflute.example.dbflute.ldb.exbhv
#              extendedDaoPackage      --> org.seasar.dbflute.example.dbflute.ldb.exdao
#              extendedEntityPackage   --> org.seasar.dbflute.example.dbflute.ldb.exentity
#
#      *If this property is not specified, you should specify the other package properties.
#
#
#    baseCommonPackage:       (Default Java:'allcommon' C#:'allcommon')
#    baseBehaviorPackage:     (Default Java:'bsbhv'     C#:'bsbhv')
#    baseDaoPackage:          (Default Java:'bsdao'     C#:'bsdao')
#    baseEntityPackage:       (Default Java:'bsentity'  C#:'bsentity')
#    conditionBeanPackage:    (Default Java:'cbean'     C#:'cbean')
#    extendedBehaviorPackage: (Default Java:'exbhv'     C#:'exbhv')
#    extendedDaoPackage:      (Default Java:'exdao'     C#:'exdao')
#    extendedEntityPackage:   (Default Java:'exentity'  C#:'exentity')
#
# @FirstProperty
torque.packageBase				= dbflute.ldb
# ----------------/

# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
#                                                 S2Dao Adjustment
#                                                     _/_/_/_/_/_/
# /---------------------------------------------------------------------------
# [S2Dao Version]
#   s2daoVersion: (Default [The latest version])
#
# @FirstProperty
# @JavaOnly
#torque.s2daoVersion = 1.0.46
# ----------------/

# /---------------------------------------------------------------------------
# [OtherConnectionDaoInitialization]
#   isAvailableOtherConnectionDaoInitialization: (Default 'false')
#     this property is valid only when isVersionAfter1040 is true.
#
# @JavaOnly
#torque.isAvailableOtherConnectionDaoInitialization = false
# ----------------/

# /---------------------------------------------------------------------------
# [DaoMethodMetaDataInitializing] (Default 'false') *Since S2Dao-1.0.47
#   [true]
#     S2Dao initialize using DatabaseMetaData.
#
#   [false]
#     S2Dao initialize without DatabaseMetaData.
#
# @JavaOnly
#torque.isAvailableDaoMethodMetaDataInitializing = false
# ----------------/

# /---------------------------------------------------------------------------
# [ChildNoAnnotationGenerating] (Default 'false')
#   [true]
#     S2Dao initialize per dao method.
#
#   [false]
#     S2Dao initialize per dao Interface(default behavior).
#
# @JavaOnly
#torque.isAvailableChildNoAnnotationGenerating = false
# ----------------/

# /---------------------------------------------------------------------------
# [S2Dao Component]
#   extendedDaoMetaDataFactoryImplClassName: (Default [dbflute provides])
#     Your original DaoMetaDataFactory.
#
#   extendedAnnotationReaderFactoryClassName: (Default 'org.seasar.dao.impl.AnnotationReaderFactoryImpl')
#     Your original AnnotationReaderFactory.
#
# @JavaOnly
#torque.extendedDaoMetaDataFactoryImplClassName = 
#torque.extendedAnnotationReaderFactoryClassName = 
# ----------------/

# /---------------------------------------------------------------------------
# [S2Dao Component]
#   daoSqlFileEncoding: (Default 'UTF-8')
#     Your original encoding of sql file for dao.
#
# @JavaOnly
#torque.daoSqlFileEncoding = UTF-8
# ----------------/

# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
#                                                         Adavance
#                                                             _/_/

# /---------------------------------------------------------------------------
# [Sequence]
#   sequenceDefinitionMap: (Default 'map:{}')
#     The method 'XxxDao#selectNextVal()' is generated for its table primary key.
#
#       ex) public String selectNextVal_SQL = "select gen_id(BOOK_BOOK_ID_INC, 1) from RDB$DATABASE";
#           public java.math.BigDecimal selectNextVal();
#           // This example is for the database of Firebird
#
#   sequenceReturnType: (Default 'java.math.BigDecimal')
#     The return type of The method 'XxxDao#selectNextVal()' as DEFAULT!
#     If the primary key type of the table is BigDecimal
#     , The return type is the same as it inspite of this property.
#
#   isAvailableBehaviorInsertSequenceInjection: (Default 'true')
#     [true]
#       Inject sequence (auto) to primary key on behavior insert.
#
# *Apache Derby does not support Sequence-Object.
#  But I want to test this property.
#
torque.sequenceDefinitionMap	= map:{ COLLECTION_STATUS_LOOKUP = testSeq }
#torque.sequenceReturnType		=	java.lang.Integer
#torque.isAvailableBehaviorInsertSequenceInjection = true
# ----------------/

# /---------------------------------------------------------------------------
# [Identity]
#   identityDefinitionMap: (NotRequired - Default 'map:{}')
#     ID annotation of s2dao is generated for its table primary key.
#
#       ex) public static final String bookId_ID = "identity";
#
# *Identity must be auto-registered by JDBC auto-increment information.
#
#torque.identityDefinitionMap	= map:{	\
#		AUTHOR	=	AUTHOR_ID	\
#		; BOOK	=	BOOK_ID	\
#		; COLLECTION	=	COLLECTION_ID	\
#	}

# ----------------/

# /--------------------------------------------------------------------------
# [Optimistic Lock]
#   updateDateFieldName: (Default null)
#     The field name of update-date. 
#     For example, if this property is 'UPDATE_DATE',
#     the annotation is generated as follows:
#       public static final String TIMESTAMP_PROPERTY = "updateDate";
#
#   updateDateExceptTableList: (Default list:{})
#     The tables are out-of-target of 'updateDateFieldName'.
#       ex) list:{ prefix:LB_ }
#
#   versionNoFieldName: (Default null)
#     The field name of version-no. 
#     For example, if this property id 'VERSION_NO'
#     the annotation is generated as follows:
#       public static final String VERSION_NO_PROPERTY = "versionNo";
#
torque.updateDateFieldName          = U_TIMESTAMP
torque.updateDateExceptTableList    = list:{ prefix:LB_ }
#torque.versionNoFieldName           = null
# ----------------/

# /---------------------------------------------------------------------------
# [Common Column]
#   commonColumnMap: (Default 'map:{}')
#     The map of common column.
#     Default value is enmpty-map.
#     For example, The date you registered the record, The user who updated the record and so on...
#
#     ex) map:{ \
#           ; REGISTER_DATETIME=TIMESTAMP; REGISTER_USER=VARCHAR; REGISTER_PROCESS=VARCHAR \
#           ; UPDATE_DATETIME=TIMESTAMP  ; UPDATE_USER=VARCHAR  ; UPDATE_PROCESS=VARCHAR \
#         }
#
#   commonColumnSetupBeforeInsertInterceptorLogicMap: (Default 'map:{}')
#   commonColumnSetupBeforeUpdateInterceptorLogicMap: (Default 'map:{}')
#   commonColumnSetupBeforeDeleteInterceptorLogicMap: (Default 'map:{}')
#     ex) map:{ \
#           ; REGISTER_DATETIME = $$AccessContext$$.getAccessTimestampOnThread() \
#           ; REGISTER_USER     = $$AccessContext$$.getAccessUserOnThread() \
#           ; REGISTER_PROCESS  = $$AccessContext$$.getAccessProcessOnThread() \
#           ; UPDATE_DATETIME   = entity.getRegisterDatetime() \
#           ; UPDATE_USER       = entity.getRegisterUser() \
#           ; UPDATE_PROCESS    = entity.getRegisterProcess() \
#         }
#     ex) map:{ \
#           ; UPDATE_DATETIME   = $$AccessContext$$.getAccessTimestampOnThread() \
#           ; UPDATE_USER       = $$AccessContext$$.getAccessUserOnThread() \
#           ; UPDATE_PROCESS    = $$AccessContext$$.getAccessProcessOnThread() \
#         }
#
torque.commonColumnMap = map:{ \
        ; R_USER=VARCHAR; R_MODULE=VARCHAR; R_TIMESTAMP=TIMESTAMP \
        ; U_USER=VARCHAR; U_MODULE=VARCHAR; U_TIMESTAMP=TIMESTAMP \
    }
torque.commonColumnSetupBeforeInsertInterceptorLogicMap = map:{ \
        ; R_USER      = entity.getTableDbName() + "-" + $$AccessContext$$.getAccessUserOnThread() \
        ; R_MODULE    = entity.getTableDbName() + "-" + $$AccessContext$$.getAccessModuleOnThread() \
        ; R_TIMESTAMP = $$AccessContext$$.getAccessTimestampOnThread() \
        ; U_USER      = entity.getRUser() \
        ; U_MODULE    = entity.getRUser() \
    }

torque.commonColumnSetupBeforeUpdateInterceptorLogicMap = map:{ \
        ; U_USER   = $$AccessContext$$.getAccessUserOnThread() \
        ; U_MODULE = $$AccessContext$$.getAccessModuleOnThread() \
    }

torque.commonColumnSetupBeforeDeleteInterceptorLogicMap = map:{}

#@Deprecated
#torque.commonColumnSetupInterceptorAspectPoint = behavior
# ----------------/

# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
#                                                     Select Param
#                                                     _/_/_/_/_/_/
# /---------------------------------------------------------------------------
# [SelectQueryTimeout]
#   selectQueryTimeout: (Default '-1')
#     This value is argument for Statement#setQueryTimeout().
# 
#@Deprecated
#torque.selectQueryTimeout = -1
# ----------------/

# /---------------------------------------------------------------------------
# [StatementResultSetType]
#   statementResultSetType: (Default 'ResultSet.TYPE_SCROLL_INSENSITIVE')
#     Result set type of statement.
#
#     *If you specify this property, you should do as follows:
#      ex) at jdbc.dicon
#
#       x <component class="org.seasar.extension.jdbc.impl.BasicStatementFactory">
#       o <component class="org.seasar.dbflute.example.approot.dao.ldb.allcommon.s2dao.S2DaoStatementFactory">
#
#@Deprecated
#torque.statementResultSetType = ResultSet.TYPE_SCROLL_INSENSITIVE
# ----------------/

# /---------------------------------------------------------------------------
# [StatementResultSetConcurrency] (Default 'ResultSet.CONCUR_READ_ONLY')
#   Result set concurrency of statement.
#
#   *If you specify this property, you should do as follows:
#    ex) at jdbc.dicon
#
#     x <component class="org.seasar.extension.jdbc.impl.BasicStatementFactory">
#     o <component class="org.seasar.dbflute.example.approot.dao.ldb.allcommon.s2dao.S2DaoStatementFactory">
#
#@Deprecated
#torque.statementResultSetConcurrency = ResultSet.CONCUR_READ_ONLY
# ----------------/

# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
#                                                    Making Option
#                                                         _/_/_/_/
# /---------------------------------------------------------------------------
# [Making Option]
#   isMakeDeprecated: (Default 'false')
#     [true]
#       Make deprecated method and class and so on...
#       *You shuold set this property FALSE!
#
#   isMakeRecentlyDeprecated: (Default 'true')
#     [true]
#       Make RECENTLY deprecated method and class and so on...
#       *You shuold set this property FALSE!
#
#   isMakeConditionQueryEqualEmptyString: (Default 'false')
#     [true]
#       Make equal empty-string method of condition-query.
#
#   isMakeBehaviorCopyInsert: (Default 'false')
#     [true]
#       Make copy insert method of behavior.
#
#   isMakeBehaviorLoopUpdate: (Default 'false')
#     [true]
#       Make loop update method of behavior.
#
#   isMakeTraceablePreparedStatement: (Default 'false')
#     [true]
#       Make traceable prepared statement.
#
torque.isMakeDeprecated = true
torque.isMakeRecentlyDeprecated = true
torque.isMakeConditionQueryEqualEmptyString = true

# @JavaOnly
torque.isMakeBehaviorCopyInsert = true
torque.isMakeBehaviorLoopUpdate = true
torque.isMakeTraceablePreparedStatement = true

#@Deprecated
#torque.isMakeConditionQueryNumericArgumentLong = false
#torque.isMakeBehaviorForUpdate = true
# ----------------/

# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
#                                                Little Adjustment
#                                                     _/_/_/_/_/_/
# /---------------------------------------------------------------------------
# [Non PrimaryKey Writable] (Default 'false')
#   [true]
#     Generate writable method at Non PrimaryKey Table.
#
#   [false]
#     Non.
#
# @JavaOnly
torque.isAvailableNonPrimaryKeyWritable = true
# ----------------/

# /---------------------------------------------------------------------------
# [Adding Schema To TableSqlName] (Default 'false')
#   [true]
#     Add schema to table sql-name.
#
#   [false]
#     Non.
#
# @JavaOnly
torque.isAvailableAddingSchemaToTableSqlName = false
# ----------------/

# /---------------------------------------------------------------------------
# [Entity Modified Properties Add Logic 'IfNeeds'] (Default 'false')
#   [true]
#     Add logic of entity modified properties use 'IfNeeds' method.
#
#   [false]
#     Normal. (When invoking setter, add property to modified properties)
#
# @JavaOnly
torque.isAvailableEntityModifiedPropertiesAddLogicIfNeeds = false
# ----------------/

# /---------------------------------------------------------------------------
# [Disable As-One-Relation]
#   disableAsOneRelationTableMap: (Default 'map:{}')
#
# @JavaOnly
torque.disableAsOneRelationTableMap = map:{}
# ----------------/

# /---------------------------------------------------------------------------
# [Multiple FK Property Map]
#   multipleFKPropertyMap: (Default 'map:{}')
#
# @JavaOnly
torque.multipleFKPropertyMap = map:{ \
	; NEXT_LIBRARY = map:{ \
		; LIBRARY_ID      = map:{columnAliasName = baseId} \
		; NEXT_LIBRARY_ID = map:{columnAliasName = nextId} \
	} \
}
# ----------------/

# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
#                                                Extract Component
#                                                     _/_/_/_/_/_/

# /---------------------------------------------------------------------------
# [ExtractAccept Protocol]
#   extractAcceptStartBrace: (NotRequired - Default '@{')
#   extractAcceptEndBrace: (NotRequired - Default '@}')
#   extractAcceptDelimiter: (NotRequired - Default '@;')
#   extractAcceptEqual: (NotRequired - Default '@=')
torque.extractAcceptStartBrace = @{
torque.extractAcceptEndBrace = @}
torque.extractAcceptDelimiter = @;
torque.extractAcceptEqual = @=
# ----------------/

# /---------------------------------------------------------------------------
# [Include Query] (NotRequired - Default 'map:{}')
#
#torque.includeQueryMap = map:{
#    ; String = map:{ NotInScope = map:{ PRO_PURCHASE_PARTS = list:{ PURCHASE_PARTS_ID ; OTS_PURCHASE_CODE } }
#}
# ----------------/



# ========================================================================================
#                                                                            for JDBC task
#                                                                            =============

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# [Database Informaition]
# 
#   * * * * * * * * * * * * * * * * * * * * * * * * *
#   You shuold use './dfprop/databaseInfoMap.dfprop'
#   Look the file!
#   * * * * * * * * * * * * * * * * * * * * * * * * *
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -



# Target database types: (NotNull - list:{TABLE;VIEW;...})
#   Default value is 'list:{TABLE;VIEW}'.
#
#torque.database.type.list = list:{TABLE;VIEW}

# /---------------------------------------------------------------------------
# [Target Database Object]
#   database.type.list: (Default 'list:{TABLE;VIEW}')
#
#   table.except.list: (NotNull 'list:{}')
#     Unnecessary tables.
#
#     For example, if you want to except the table that the name starts with 'D_',
#     you should set this property as follows:
#       ex) list:{prefix:D_}
#
#     And other example:
#       ex) list:{prefix:D_; suffix:_Test; sysobjects; dtproperties}
#
#
#   table.target.list: (Default 'list:{}' --> All tables are target)
#     Target tables.
#     If this property is empty-list, the property of [Unnecessary tables] is valid.
#
#     For example, if you want to contains the table that the name starts with 'D_',
#     you should set this property as follows:
#       ex) list:{prefix:D_}
# 
#     And other example:
#       ex) list:{prefix:D_; suffix:_Test; sysobjects; dtproperties}
# 
#     If the table defined at this property is defined at [Unnecessary tables] too,
#     the table is target of generating.
#
#
#   torque.simple.column.except.list: (Default 'list:{}' --> All columns are target)
#     Unnecessary columns.
#
#     For example, if you want to except the column that the name starts with 'TMP_',
#     you should set this property as follows:
#       ex) list:{prefix:TMP_}
#
#
# @FirstProperty
#torque.database.type.list = list:{TABLE;VIEW}
#torque.table.except.list = list:{}
#torque.table.target.list = list:{}
#torque.simple.column.except.list = list:{}
# ----------------/


# ========================================================================================
#                                                                             for Internal
#                                                                             ============
# Normally you don't need to change these properties.

#
# [JDBC to java-native mapping] (NotRequired - Default 'map:{}')
#
# ex) map:{INTEGER=java.lang.Integer;TIMESTAMP=java.util.Date}
# ex) map:{} // If you don't want to change...
#
# Default mapping as follows:
# * ----------------------------------------------------
# * JDBC Type     | Java Type            | CSharp Type |
# * ----------------------------------------------------
# * CHAR          | java.lang.String     | String      |
# * VARCHAR       | java.lang.String     | String      |
# * LONGVARCHAR   | java.lang.String     | String      |
# * NUMERIC       | java.math.BigDecimal | decimal?    |
# * DECIMAL       | java.math.BigDecimal | decimal?    |
# * BIT           | java.lang.Boolean    | bool?       |
# * BOOLEAN       | java.lang.Boolean    | bool?       |
# * TINYINT       | java.lang.Integer    | int?        |
# * SMALLINT      | java.lang.Integer    | int?        |
# * INTEGER       | java.lang.Integer    | int?        |
# * BIGINT        | java.lang.Long       | long?       |
# * REAL          | java.math.BigDecimal | decimal?    |
# * FLOAT         | java.math.BigDecimal | decimal?    |
# * DOUBLE        | java.math.BigDecimal | decimal?    |
# * BINARY        | byte[]               | byte[]      |
# * VARBINARY     | byte[]               | byte[]      |
# * LONGVARBINARY | byte[]               | byte[]      |
# * DATE          | java.util.Date       | DateTime?   |
# * TIME          | java.sql.Time        | DateTime?   |
# * TIMESTAMP     | java.sql.Timestamp   | DateTime?   |
# * ----------------------------------------------------
# torque.jdbcToJavaNativeMap = map:{NUMERIC=$$AutoMapping$$;DECIMAL=$$AutoMapping$$}

# [The list of java-native that treated as String] (NotRequired - Default 'list:{}')
#   *This property overrides all-default-value.
#
#   Default list as follows: (When you set this empty)
#     Java{String} / CSharp{String}
#
#torque.javaNativeStringList = list:{}

# [The list of java-native that treated as Boolean] (NotRequired - Default 'list:{}')
#   *This property overrides all-default-value.
#
#   Default list as follows: (When you set this empty)
#     Java{Boolean} / CSharp{Nullables.NullableBoolean}
#
#torque.javaNativeBooleanList = list:{}

# [The list of java-native that treated as Number] (NotRequired - Default 'list:{}')
#   *This property overrides all-default-value.
#
#   Default list as follows: (When you set this empty)
#     Java{Byte, Short, Integer, Long, Float, Double, BigDecimal, BigInteger} / CSharp{Nullables.NullableDecimal}
#
#torque.javaNativeNumberList = list:{}

# [The list of java-native that treated as Date] (NotRequired - Default 'list:{}')
#   *This property overrides all-default-value.
#
#   Default list as follows: (When you set this empty)
#     Java{Date, Time, Timestamp} / CSharp{Nullables.NullableDateTime}
#
#torque.javaNativeDateList = list:{}

# [The list of java-native that treated as Binary] (NotRequired - Default 'list:{}')
#   *This property overrides all-default-value.
#
#   Default list as follows: (When you set this empty)
#     byte[]
#
#torque.javaNativeBinaryList = list:{}


# /---------------------------------------------------------------------------
# [ToLowerInGeneratorUnderscoreMethod] (NotRequired - Default 'true')
#   [true]
#
#   [false]
#
#torque.isAvailableToLowerInGeneratorUnderscoreMethod = true
# ----------------/
