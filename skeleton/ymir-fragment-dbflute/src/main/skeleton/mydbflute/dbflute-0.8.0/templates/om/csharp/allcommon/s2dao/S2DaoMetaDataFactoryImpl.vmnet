
using System;
using System.Data;
using System.Collections;
using System.Reflection;
using System.Text;

using Seasar.Framework.Util;
using Seasar.Extension.ADO;
using Seasar.Extension.ADO.Impl;
using Seasar.Dao;
using Seasar.Dao.Impl;

using ${glPackageBaseCommonJavaLike};

namespace ${glPackageBaseCommonS2Dao} {

    public class ${glS2DaoMetaDataFactoryImpl} : Seasar.Dao.IDaoMetaDataFactory {

        // ===============================================================================
        //                                                                      Definition
        //                                                                      ==========
        private static readonly log4net.ILog _log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

        // ===============================================================================
        //                                                                       Attribute
        //                                                                       =========
        private readonly Hashtable _daoMetaDataCache = new Hashtable();
        protected readonly IDataSource _dataSource;
        protected readonly ICommandFactory _commandFactory;
        protected readonly IDataReaderFactory _dataReaderFactory;
        protected readonly IAnnotationReaderFactory _readerFactory;
        protected IDatabaseMetaData _dbMetaData;
        protected string _sqlFileEncoding = Encoding.Default.WebName;
        protected string[] _insertPrefixes;
        protected string[] _updatePrefixes;
        protected string[] _deletePrefixes;
		protected Map<Type, IBeanMetaData> _beanMetaDataCacheMap = new HashMap<Type, IBeanMetaData>();

        // ===============================================================================
        //                                                                     Constructor
        //                                                                     ===========
        public ${glS2DaoMetaDataFactoryImpl}(IDataSource dataSource,
            ICommandFactory commandFactory, IAnnotationReaderFactory readerFactory,
            IDataReaderFactory dataReaderFactory) {
            _dataSource = dataSource;
            _commandFactory = commandFactory;
            _readerFactory = readerFactory;
            _dataReaderFactory = dataReaderFactory;
        }

        // ===============================================================================
        //                                                                  Implementation
        //                                                                  ==============
        public IDaoMetaData GetDaoMetaData(Type daoType) {
            lock (this) {
                string key = daoType.FullName;
                IDaoMetaData dmd = (IDaoMetaData)_daoMetaDataCache[key];
                if (dmd != null) {
                    return dmd;
                }
                if (_log.IsDebugEnabled) {
                    _log.Debug("...Creating daoMetaData for '" + daoType.Name + "'.");
                }
                dmd = CreateDaoMetaData(daoType);
                _daoMetaDataCache[key] = dmd;
                return dmd;
            }
        }

        protected virtual IDaoMetaData CreateDaoMetaData(Type daoType) {
            ${glS2DaoMetaDataExtension} dmd = NewDaoMetaDataExtension();
            dmd.DaoType = daoType;
            dmd.DataSource = _dataSource;
            dmd.CommandFactory = _commandFactory;
            dmd.DataReaderFactory = _dataReaderFactory;
            dmd.DataReaderHandlerFactory = CreateInternalDataReaderHandlerFactory();
            dmd.AnnotationReaderFactory = _readerFactory;
            if (_dbMetaData == null) {
                _dbMetaData = new DatabaseMetaDataImpl(_dataSource);
            }
            dmd.DatabaseMetaData = _dbMetaData;
            if (_sqlFileEncoding != null) {
                dmd.SqlFileEncoding = _sqlFileEncoding;
            }
            if (_insertPrefixes != null) {
                dmd.InsertPrefixes = _insertPrefixes;
            }
            if (_updatePrefixes != null) {
                dmd.UpdatePrefixes = _updatePrefixes;
            }
            if (_deletePrefixes != null) {
                dmd.DeletePrefixes = _deletePrefixes;
            }
			dmd.BeanMetaDataCacheMap = _beanMetaDataCacheMap;
            dmd.Initialize();
            return dmd;
        }

        protected virtual ${glS2DaoMetaDataExtension} NewDaoMetaDataExtension() {
            return new ${glS2DaoMetaDataExtension}();
        }

        protected virtual InternalDataReaderHandlerFactory CreateInternalDataReaderHandlerFactory() {
            return new InternalDataReaderHandlerFactory();
        }

        // ===============================================================================
        //                                                                        Accessor
        //                                                                        ========
        public IDatabaseMetaData DBMetaData {
            set { _dbMetaData = value; }
        }

        public string[] InsertPrefixes {
            set { _insertPrefixes = value; }
        }

        public string[] UpdatePrefixes {
            set { _updatePrefixes = value; }
        }

        public string[] DeletePrefixes {
            set { _deletePrefixes = value; }
        }

        public string SqlFileEncoding {
            set { _sqlFileEncoding = value; }
        }
    }
	
    public class InternalDataReaderHandlerFactory : IDataReaderHandlerFactory {
        public virtual IDataReaderHandler GetResultSetHandler(Type beanType, IBeanMetaData bmd, MethodInfo mi) {
            Type retType = mi.ReturnType;
            if (typeof(DataSet).IsAssignableFrom(retType)) {
                return CreateBeanDataSetMetaDataDataReaderHandler(bmd, retType);
            } else if (typeof(DataTable).IsAssignableFrom(retType)) {
                return CreateBeanDataTableMetaDataDataReaderHandler(bmd, retType);
            } else if (retType.IsArray) {
                Type elementType = retType.GetElementType();
                if (AssignTypeUtil.IsSimpleType(elementType)) {
                    return CreateObjectArrayDataReaderHandler(elementType);
                } else {
                    return CreateBeanArrayMetaDataDataReaderHandler(bmd);
                }
            } else if (AssignTypeUtil.IsList(retType)) {
                if (AssignTypeUtil.IsSimpleType(beanType)) {
                    return CreateObjectListDataReaderHandler();
                } else {
                    return CreateBeanListMetaDataDataReaderHandler(bmd);
                }
            } else if (IsBeanTypeAssignable(beanType, retType)) {
                return CreateBeanMetaDataDataReaderHandler(bmd);
            } else if (AssignTypeUtil.IsGenericList(retType)) {
                Type elementType = retType.GetGenericArguments()[0];
                if (AssignTypeUtil.IsSimpleType(elementType)) {
                    return CreateObjectGenericListDataReaderHandler(elementType);
                } else {
                    return CreateBeanGenericListMetaDataDataReaderHandler(bmd);
                }
            } else {
                return CreateObjectDataReaderHandler();
            }
        }

        protected virtual ObjectGenericListDataReaderHandler CreateObjectGenericListDataReaderHandler(Type elementType) {
            return new ObjectGenericListDataReaderHandler(elementType);
        }

        protected virtual ObjectListDataReaderHandler CreateObjectListDataReaderHandler() {
            return new ObjectListDataReaderHandler();
        }

        protected virtual ObjectArrayDataReaderHandler CreateObjectArrayDataReaderHandler(Type elementType) {
            return new ObjectArrayDataReaderHandler(elementType);
        }

        protected virtual BeanDataSetMetaDataDataReaderHandler CreateBeanDataSetMetaDataDataReaderHandler(IBeanMetaData bmd, Type returnType) {
            return new BeanDataSetMetaDataDataReaderHandler(returnType);
        }

        protected virtual BeanDataTableMetaDataDataReaderHandler CreateBeanDataTableMetaDataDataReaderHandler(IBeanMetaData bmd, Type returnType) {
            return new BeanDataTableMetaDataDataReaderHandler(returnType);
        }

        protected virtual BeanListMetaDataDataReaderHandler CreateBeanListMetaDataDataReaderHandler(IBeanMetaData bmd) {
            return new BeanListMetaDataDataReaderHandler(bmd, CreateRowCreator(), CreateRelationRowCreator());
        }

        protected virtual BeanMetaDataDataReaderHandler CreateBeanMetaDataDataReaderHandler(IBeanMetaData bmd) {
            return new BeanMetaDataDataReaderHandler(bmd, CreateRowCreator(), CreateRelationRowCreator());
        }

        protected virtual BeanArrayMetaDataDataReaderHandler CreateBeanArrayMetaDataDataReaderHandler(IBeanMetaData bmd) {
            return new BeanArrayMetaDataDataReaderHandler(bmd, CreateRowCreator(), CreateRelationRowCreator());
        }

        protected virtual BeanGenericListMetaDataDataReaderHandler CreateBeanGenericListMetaDataDataReaderHandler(IBeanMetaData bmd) {
            return new BeanGenericListMetaDataDataReaderHandler(bmd, CreateRowCreator(), CreateRelationRowCreator());
        }

        protected virtual ObjectDataReaderHandler CreateObjectDataReaderHandler() {
            return new ObjectDataReaderHandler();
        }

        protected virtual IRowCreator CreateRowCreator() {
            return new RowCreatorExtension();
        }

        protected virtual IRelationRowCreator CreateRelationRowCreator() {
            return new RelationRowCreatorExtension();
        }

        protected virtual bool IsBeanTypeAssignable(Type beanType, Type type) {
            return beanType.IsAssignableFrom(type) || type.IsAssignableFrom(beanType);
        }
    }

    public class InternalProcedureMetaData {
        protected String _procedureName;
        protected LinkedHashMap<String, InternalProcedureParameterType> parameterTypeMap = new LinkedHashMap<String, InternalProcedureParameterType>();
        protected Type _returnType;
        public InternalProcedureMetaData(String procedureName) {
            _procedureName = procedureName;
        }
        public String ProcedureName { get {
            return _procedureName;
        } set {
            _procedureName = value;
        }}
        public InternalProcedureParameterType GetParameterType(int index) {
            return parameterTypeMap.get(index);
        }
        public InternalProcedureParameterType GetParameterType(String parameterName) {
            return parameterTypeMap.get(parameterName.ToLower());
        }
        public int ParameterTypeSize { get {
            return parameterTypeMap.size();
        }}
        public bool HasReturnParameterType { get {
            return _returnType != null;
        }}
        public Type ReturnParameterType { get {
            return _returnType;
        }}
        public void AddParameterType(InternalProcedureParameterType parameterType) {
            String name = parameterType.ParameterName;
            parameterTypeMap.put(name.ToLower(), parameterType);
            if (parameterType.IsReturnType) {
                _returnType = parameterType.ParameterPropertyType;
            }
        }
    }

    public class InternalProcedureParameterType {
        protected String _parameterName;
        protected PropertyInfo _parameterProperty;
        protected Type _parameterPropertyType;
        protected ParameterDirection _parameterDirectionType;
        protected bool _inType;
        protected bool _outType;
        protected bool _returnType;
        public InternalProcedureParameterType(String parameterName, PropertyInfo parameterProperty) {
            _parameterName = parameterName;
            _parameterProperty = parameterProperty;
            _parameterPropertyType = parameterProperty.PropertyType;
        }
        public Object GetValue(Object dto) {
            return _parameterProperty.GetValue(dto, null);
        }
        public void SetValue(Object dto, Object value) {
            _parameterProperty.SetValue(dto, value, null);
        }
        public String ParameterName { get { return _parameterName; } }
        public PropertyInfo ParameterProperty { get { return _parameterProperty; } }
        public Type ParameterPropertyType { get { return _parameterPropertyType; } }
        public ParameterDirection ParameterDirectionType { get { return _parameterDirectionType; } set { _parameterDirectionType = value; } }
        public bool IsInType { get { return _inType; } set { _inType = value; } }
        public bool IsOutType { get { return _outType; } set { _outType = value; } }
        public bool IsReturnType { get { return _returnType; } set { _returnType = value; } }
    }

    public class InternalProcedureMetaDataFactory {
        protected InternalFieldProcedureAnnotationReader _annotationReader = new InternalFieldProcedureAnnotationReader();
        public InternalProcedureMetaData CreateProcedureMetaData(String procedureName, Type pmbType) {
            InternalProcedureMetaData metaData = new InternalProcedureMetaData(procedureName);
            if (pmbType == null) {
                return metaData;
            } else {
                if (!IsDtoType(pmbType)) {
                    throw new IllegalStateException("The pmb type is Not DTO type: " + pmbType.Name);
                }
            }
            RegisterParameterType(metaData, pmbType, pmbType.GetProperties());
            return metaData;
        }
        protected void RegisterParameterType(InternalProcedureMetaData metaData, Type pmbType, PropertyInfo[] properties) {
            foreach (PropertyInfo property in properties) {
                InternalProcedureParameterType ppt = GetProcedureParameterType(pmbType, property);
                if (ppt == null) {
                    continue;
                }
                metaData.AddParameterType(ppt);
            }
        }
        protected InternalProcedureParameterType GetProcedureParameterType(Type pmbType, PropertyInfo property) {
            InternalProcedureParameterInfo info = _annotationReader.GetProcedureParameter(pmbType, property);
            if (info == null) {
                return null;
            }
            String name = info.ParameterName;
            String type = info.ParameterType;
            type = type.ToLower();
            InternalProcedureParameterType ppt = new InternalProcedureParameterType(name, property);
            if (type.Equals("in")) {
                ppt.IsInType = true;
                ppt.ParameterDirectionType = ParameterDirection.Input;
            } else if (type.Equals("out")) {
                ppt.IsOutType = true;
                ppt.ParameterDirectionType = ParameterDirection.Output;
            } else if (type.Equals("inout")) {
                ppt.IsInType = true;
                ppt.IsOutType = true;
                ppt.ParameterDirectionType = ParameterDirection.InputOutput;
            } else if (type.Equals("return")) {
                ppt.IsOutType = true;
                ppt.IsReturnType = true;
                ppt.ParameterDirectionType = ParameterDirection.ReturnValue;
            } else {
                throw new IllegalStateException("The parameter type is wrong: type=" + type);
            }
            return ppt;
        }
        protected bool IsDtoType(Type clazz) {
            return true; // No check because no time.
        }
    }

    public class InternalFieldProcedureAnnotationReader {
        protected String PROCEDURE_PARAMETER_SUFFIX;
        public InternalFieldProcedureAnnotationReader() {
            PROCEDURE_PARAMETER_SUFFIX = "_PROCEDURE_PARAMETER";
        }
        public InternalProcedureParameterInfo GetProcedureParameter(Type pmbType, PropertyInfo property) {
            String propertyName = property.Name;
            String annotationName = InitUncap(propertyName) + PROCEDURE_PARAMETER_SUFFIX;
            FieldInfo field = pmbType.GetField(annotationName, BindingFlags.Public | BindingFlags.Static);
            if (field != null) {
                String annotationValue = (String)field.GetValue(null);
                InternalProcedureParameterInfo info = new InternalProcedureParameterInfo();
                String[] values = annotationValue.Split(',');
                if (values.Length != 2) {
                    String msg = "The value of annotation is wrong.";
                    msg = msg + " You should set '[parameterName], [parameterType]'.";
                    msg = msg + " But: annotation=" + annotationName + " value=" + annotationValue;
                    throw new IllegalStateException(msg);
                }
                info.ParameterName = values[0].Trim();
                info.ParameterType = values[1].Trim();
                return info;
            } else {
                return null;
            }
        }
        protected String InitUncap(String str) {
            return str.Substring(0, 1).ToLower() + str.Substring(1);
        }
    }

    public class InternalProcedureParameterInfo {
        protected String _parameterName;
        protected String _parameterType;
        public String ParameterName { get { return _parameterName; } set { _parameterName = value; } }
        public String ParameterType { get { return _parameterType; } set { _parameterType = value; } }
    }
}