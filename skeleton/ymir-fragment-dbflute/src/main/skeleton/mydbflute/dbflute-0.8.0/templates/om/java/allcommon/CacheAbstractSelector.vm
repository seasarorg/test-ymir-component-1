${database.allClassCopyright}package ${glPackageBaseCommon};

#if ($database.isTargetContainerSeasar())
import org.seasar.framework.container.S2Container;
#end
#if ($database.isTargetContainerSpring())
import org.springframework.context.ApplicationContext;
#end

/**
 * The abstract class of cache-selector.
 * @author ${database.ClassAuthor}
 */${database.outputSuppressWarningsAfterLineSeparator()}
public abstract class ${glCacheAbstractSelector} {

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
#if ($database.isTargetContainerSeasar())
    /** The container of Seasar. */
    protected S2Container _container;
#end
#if ($database.isTargetContainerSpring())
    /** The container of Spring. */
    protected ApplicationContext _container;
#end

    // ===================================================================================
    //                                                                           Component
    //                                                                           =========
	public <COMPONENT> COMPONENT getComponent(Class<COMPONENT> componentType) {
		assertObjectNotNull("componentType", componentType);
		assertObjectNotNull("_container", _container);
#if ($database.isTargetContainerSeasar())
		return (COMPONENT)_container.getComponent(componentType);
#end
#if ($database.isTargetContainerSpring())
		return (COMPONENT)_container.getBean(initUncap(componentType.getSimpleName()));
#end
	}
	
    // ===================================================================================
    //                                                                             Destroy
    //                                                                             =======
    public void destroy() {
        _container = null;
    }

    // ===================================================================================
    //                                                                              Helper
    //                                                                              ======
    protected String initUncap(String str) {
        return str.substring(0, 1).toLowerCase() + str.substring(1);
    }
	
    // ===================================================================================
    //                                                                              Assert
    //                                                                              ======
    // -----------------------------------------------------
    //                                         Assert Object
    //                                         -------------
    /**
     * Assert that the object is not null.
     * @param variableName Variable name. (NotNull)
     * @param value Value. (NotNull)
     * @exception IllegalArgumentException
     */
    protected void assertObjectNotNull(String variableName, Object value) {
        if (variableName == null) {
            String msg = "The value should not be null: variableName=" + variableName + " value=" + value;
            throw new IllegalArgumentException(msg);
        }
        if (value == null) {
            String msg = "The value should not be null: variableName=" + variableName;
            throw new IllegalArgumentException(msg);
        }
    }

    // -----------------------------------------------------
    //                                         Assert String
    //                                         -------------
    /**
     * Assert that the entity is not null and not trimmed empty.
     * @param variableName Variable name. (NotNull)
     * @param value Value. (NotNull)
     */
    protected void assertStringNotNullAndNotTrimmedEmpty(String variableName, String value) {
        assertObjectNotNull("variableName", variableName);
        assertObjectNotNull("value", value);
        if (value.trim().length() ==0) {
            String msg = "The value should not be empty: variableName=" + variableName + " value=" + value;
            throw new IllegalArgumentException(msg);
        }
    }

    // ===================================================================================
    //                                                                            Accessor
    //                                                                            ========
#if ($database.isTargetContainerSeasar())
    public void setContainer(S2Container container) {
        this._container = container;
    }
#end
#if ($database.isTargetContainerSpring())
    public void setContainer(ApplicationContext container) {
        this._container = container;
    }
#end
}
