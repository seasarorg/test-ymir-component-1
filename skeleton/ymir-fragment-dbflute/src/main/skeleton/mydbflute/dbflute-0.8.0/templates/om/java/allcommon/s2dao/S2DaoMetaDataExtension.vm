${database.allClassCopyright}package ${glPackageBaseCommonS2Dao};

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import javax.sql.DataSource;

import org.seasar.dao.BeanEnhancer;
import org.seasar.dao.BeanMetaData;
import org.seasar.dao.BeanMetaDataFactory;
import org.seasar.dao.ColumnNaming;
import org.seasar.dao.IllegalParameterTypeRuntimeException;
import org.seasar.dao.ProcedureMetaData;
import org.seasar.dao.ProcedureParameterType;
import org.seasar.dao.PropertyTypeFactoryBuilder;
import org.seasar.dao.RelationPropertyType;
import org.seasar.dao.RelationPropertyTypeFactoryBuilder;
import org.seasar.dao.RelationRowCreator;
import org.seasar.dao.RowCreator;
import org.seasar.dao.SqlCommand;
import org.seasar.dao.TableNaming;
import org.seasar.dao.ValueTypeFactory;
import org.seasar.dao.dbms.DbmsManager;
import org.seasar.dao.impl.BeanMetaDataImpl;
import org.seasar.dao.impl.DaoMetaDataImpl;
import org.seasar.dao.impl.ProcedureMetaDataImpl;
import org.seasar.dao.impl.ProcedureParameterTypeImpl;
import org.seasar.dao.impl.RelationRowCreationResource;
import org.seasar.dao.impl.ResultSetHandlerFactoryImpl;
import org.seasar.dao.impl.SelectDynamicCommand;
import org.seasar.dao.impl.UpdateAutoStaticCommand;
import org.seasar.dao.util.TypeUtil;
import org.seasar.extension.jdbc.PropertyType;
import org.seasar.extension.jdbc.ResultSetHandler;
import org.seasar.extension.jdbc.StatementFactory;
import org.seasar.extension.jdbc.ValueType;
import org.seasar.extension.jdbc.types.ValueTypes;
import org.seasar.framework.beans.BeanDesc;
import org.seasar.framework.beans.MethodNotFoundRuntimeException;
import org.seasar.framework.beans.PropertyDesc;
import org.seasar.framework.beans.factory.BeanDescFactory;
import org.seasar.framework.util.FieldUtil;
import org.seasar.framework.util.MethodUtil;

import ${glPackageBaseCommon}.${glEntityInterfaceName};
import ${glPackageBaseCommon}.${glInternalMapContextName};
import ${glPackageBaseCommon}.${glBehaviorSelectorInterfaceName};
import ${glPackageBaseCommonAnnotation}.${glOutsideSqlAnnotation};
import ${glPackageBaseCommonCBean}.${glConditionBeanInterfaceName};
import ${glPackageBaseCommonCBean}.${glConditionBeanContextName};
import ${glPackageBaseCommonCBeanOutsidesql}.${glOutsideSqlContextName};
import ${glPackageBaseCommonDBMeta}.${glDBMetaInterfaceName};
import ${glPackageBaseCommonException}.${glEntityAlreadyDeletedException};
import ${glPackageBaseCommonException}.${glBatchEntityAlreadyUpdatedException};
import ${glPackageBaseCommonException}.${glEntityDuplicatedException};
import ${glPackageBaseCommonJdbc}.${glCursorHandlerName};
import ${glPackageBaseCommonS2DaoInternalRsHandler}.${glInternalBeanListMetaDataResultSetHandler};
import ${glPackageBaseCommonS2DaoInternalRsHandler}.${glInternalBeanArrayMetaDataResultSetHandler};
import ${glPackageBaseCommonS2DaoInternalSqlCommand}.${glInternalDeleteAutoStaticCommand};
import ${glPackageBaseCommonS2DaoInternalSqlCommand}.${glInternalDeleteBatchAutoStaticCommand};
import ${glPackageBaseCommonS2DaoInternalSqlCommand}.${glInternalDeleteQueryAutoDynamicCommand};
import ${glPackageBaseCommonS2DaoInternalSqlCommand}.${glInternalInsertAutoDynamicCommand};
import ${glPackageBaseCommonS2DaoInternalSqlCommand}.${glInternalInsertBatchAutoStaticCommand};
import ${glPackageBaseCommonS2DaoInternalSqlCommand}.${glInternalProcedureCommand};
import ${glPackageBaseCommonS2DaoInternalSqlCommand}.${glInternalUpdateAutoDynamicCommand};
import ${glPackageBaseCommonS2DaoInternalSqlCommand}.${glInternalUpdateBatchAutoStaticCommand};
import ${glPackageBaseCommonS2DaoInternalSqlCommand}.${glInternalUpdateDynamicCommand};
import ${glPackageBaseCommonS2DaoInternalSqlCommand}.${glInternalUpdateModifiedOnlyCommand};
import ${glPackageBaseCommonS2DaoInternalSqlCommand}.${glInternalUpdateQueryAutoDynamicCommand};
import ${glPackageBaseCommonS2DaoInternalSqlHandler}.${glInternalBasicHandler}.SQLExceptionHandler;
import ${glPackageBaseCommonS2DaoInternalSqlHandler}.${glInternalUpdateBatchAutoHandler};
import ${glPackageBaseCommonS2DaoInternalSqlHandler}.${glInternalDeleteBatchAutoHandler};
import ${glPackageBaseCommonUtil}.${glSimpleSystemUtil};

/**
 * The extension of DaoMetaDataImpl for DBFlute.
 * @author ${database.ClassAuthor}
 */${database.outputSuppressWarningsAfterLineSeparator()}
public class ${glDaoMetaDataExtension} extends DaoMetaDataImpl {

    // ===================================================================================
    //                                                                          Definition
    //                                                                          ==========
    /** Log instance. */
    private static final org.apache.commons.logging.Log _log = org.apache.commons.logging.LogFactory.getLog(${glDaoMetaDataExtension}.class);
    
    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    /** Bean enhancer. */
    protected BeanEnhancer beanEnhancer;

    /** The factory of annotation reader. */
    protected org.seasar.dao.AnnotationReaderFactory annotationReaderFactory;

    /** The naming of column. {After S2Dao-1.0.47} */
    protected ColumnNaming columnNaming;

    /** The builder of property type factory. {After S2Dao-1.0.47} */
    protected PropertyTypeFactoryBuilder propertyTypeFactoryBuilder;

    /** The builder of relation property type factory. {After S2Dao-1.0.47} */
    protected RelationPropertyTypeFactoryBuilder relationPropertyTypeFactoryBuilder;

    /** The builder of table naming. {After S2Dao-1.0.47} */
    protected TableNaming tableNaming;

    // -----------------------------------------------------
    //                                     DBFlute Extension
    //                                     -----------------
    /** The selector of behavior. {Since DBFlute-0.7.1} */
    protected ${glBehaviorSelectorInterfaceName} _behaviorSelector;
    
    /** The lock monitor of method initialization. */
    protected Object _methodInitializationLockMonitor = new Object();
    
    /** The determination of internal debug. {Since DBFlute-0.6.2} */
    protected boolean _internalDebug;
    
    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    public ${glDaoMetaDataExtension}() {
    }

    // ===================================================================================
    //                                                                 Initialize Override
    //                                                                 ===================
    @Override
    public void initialize() {
        beanClass = daoAnnotationReader.getBeanClass();
        daoInterface = getDaoInterface(daoClass);
        daoBeanDesc = BeanDescFactory.getBeanDesc(daoClass);
        final Connection conn = getConnection();// It is first impact to Database!
        try {
            final DatabaseMetaData dbMetaData = getMetaData(conn);
            dbms = DbmsManager.getDbms(getDatabaseProductName(dbMetaData));
        } finally {
            close(conn);
        }
        this.beanMetaData = beanMetaDataFactory.createBeanMetaData(daoInterface, beanClass);
        checkSingleRowUpdateForAll = daoAnnotationReader.isCheckSingleRowUpdate();

        // Comment out for lazy-load!
        // setupSqlCommand();
    }

    // ===================================================================================
    //                                                           SqlCommand Setup Override
    //                                                           =========================
    @Override
    public SqlCommand getSqlCommand(String methodName) throws MethodNotFoundRuntimeException {
        SqlCommand cmd = (SqlCommand) sqlCommands.get(methodName);
        if (cmd != null) {
            return cmd;
        }
        synchronized (_methodInitializationLockMonitor) {
            cmd = (SqlCommand) sqlCommands.get(methodName);
            if (cmd != null) {
                if (_log.isDebugEnabled()) {
                    _log.debug("...Getting sqlCommand as cache because the previous thread have already initilized.");
                }
                return cmd;
            }
            if (_log.isDebugEnabled()) {
                _log.debug("...Initializing sqlCommand for " + methodName + "().");
            }
            cmd = initializeSqlCommand(methodName);
        }
        return cmd;
    }

    protected SqlCommand initializeSqlCommand(String methodName) throws MethodNotFoundRuntimeException {
        if (${glOutsideSqlContextName}.isExistOutsideSqlContextOnThread()) {
            final ${glOutsideSqlContextName} outsideSqlContext = ${glOutsideSqlContextName}.getOutsideSqlContextOnThread();
            if (outsideSqlContext != null && outsideSqlContext.isSpecifiedOutsideSql()) {
                return initializeSpecifiedOutsideSqlCommand(methodName, outsideSqlContext);
            }
        }
        final Method[] methods = daoBeanDesc.getMethods(methodName);
        if (methods.length == 1 && MethodUtil.isAbstract(methods[0])) {
            setupMethod(methods[0]);
        }
        final SqlCommand cmd = (SqlCommand) sqlCommands.get(methodName);
        if (cmd != null) {
            return cmd;
        }
        throw new MethodNotFoundRuntimeException(daoClass, methodName, null);
    }

    protected SqlCommand initializeSpecifiedOutsideSqlCommand(String sqlCommandKey, ${glOutsideSqlContextName} outsideSqlContext) throws MethodNotFoundRuntimeException {
        final Method[] methods = daoBeanDesc.getMethods(outsideSqlContext.getMethodName());// By real method name.
        if (methods.length == 1 && org.seasar.framework.util.MethodUtil.isAbstract(methods[0])) {
            final Method method = methods[0];
            if (isOutsideSqlDaoMethodSelect(method)) {
                setupSpecifiedOutsideSqlSelectCommand(sqlCommandKey, method, outsideSqlContext);
            } else if (isOutsideSqlDaoMethodCall(method)) {
                setupSpecifiedOutsideSqlCallCommand(sqlCommandKey, method, outsideSqlContext);
            } else {
                setupSpecifiedOutsideSqlExecuteCommand(sqlCommandKey, method, outsideSqlContext);
            }
        }
        final SqlCommand cmd = (SqlCommand) sqlCommands.get(sqlCommandKey);
        if (cmd != null) {
            return cmd;
        }
        String msg = "Internal Error! The sql-command is not found:";
        msg = msg + " sqlCommandKey=" + sqlCommandKey;
        msg = msg + " sqlCommands=" + sqlCommands;
        throw new IllegalStateException(msg);
    }

    protected boolean isOutsideSqlDaoMethodSelect(Method method) {
        return method.getName().startsWith("select");
    }

    protected boolean isOutsideSqlDaoMethodCall(Method method) {
        return method.getName().startsWith("call");
    }

    // ===================================================================================
    //                                                                Setup Method by Auto
    //                                                                ====================
    @Override
    protected void setupMethodByAuto(Method method) {
        final ${glOutsideSqlAnnotation} outsideSql = method.getAnnotation(${glOutsideSqlAnnotation}.class);
        if (outsideSql != null) {
            String msg = "This method '" + method.getName() + "()' should use Outside Sql but the file was not found!";
            msg = msg + " Expected sql file name is '" + method.getDeclaringClass().getSimpleName() + "_" + method.getName() + ".sql'";
            throw new IllegalStateException(msg);
        }
        super.setupMethodByAuto(method);
    }

    // ===================================================================================
    //                                                                 ConditionBean Setup
    //                                                                 ===================
    @Override
    protected void setupSelectMethodByAuto(final Method method) {
        final ResultSetHandler handler = createResultSetHandler(method);
        final String[] argNames = daoAnnotationReader.getArgNames(method);
        final String query = daoAnnotationReader.getQuery(method);
        final SqlCommand cmd;
        if (query != null && !startsWithOrderBy(query)) {
            // For Pure S2Dao *Deprecated at the future...
            cmd = setupInternalQuerySelectMethodByAuto(method, handler, argNames, query);
        } else {
            cmd = setupInternalNonQuerySelectMethodByAuto(method, handler, argNames, query);
        }
        putSqlCommand(method.getName(), cmd);
    }

    // For Pure S2Dao *Deprecated at the future...
    protected SelectDynamicCommand setupInternalQuerySelectMethodByAuto(final Method method
                                                                      , final ResultSetHandler handler
                                                                      , final String[] argNames
                                                                      , final String query) {
        final Class[] types = method.getParameterTypes();
        final SelectDynamicCommand cmd = createSelectDynamicCommand(handler, query);
        cmd.setArgNames(argNames);
        cmd.setArgTypes(types);
        return cmd;
    }

    protected SqlCommand setupInternalNonQuerySelectMethodByAuto(final Method method
                                                               , final ResultSetHandler handler
                                                               , final String[] argNames
                                                               , final String query) {
        if (isAutoSelectSqlByDto(method, argNames)) {
            return setupInternalNonQuerySelectMethodByDto(method, handler, argNames, query);
        } else {
            // For Pure S2Dao *Deprecated at the future...
            return setupNonQuerySelectMethodByArgs(method, handler, argNames, query);
        }
    }
    
    // For condition-bean!
    protected SqlCommand setupInternalNonQuerySelectMethodByDto(Method method
                                                              , ResultSetHandler handler
                                                              , String[] argNames
                                                              , String query) {
        Class[] types = method.getParameterTypes();
        Class clazz = types[0];
        // /----------------------------------------------------- [MyExtension]
        if (!${glConditionBeanContextName}.isTheTypeConditionBean(clazz)) {
            return super.setupNonQuerySelectMethodByDto(method, handler, argNames, query);
        }
        argNames = new String[] { "dto" };
        final ${glSelectDynamicCommand} cmd = createCustomizeSelectDynamicCommand(handler);
        cmd.setArgNames(argNames);
        cmd.setArgTypes(types);
        // -----------/
        return cmd;
    }

    // ===================================================================================
    //                                       Insert and Update and Delete By Auto Override
    //                                       =============================================
    // -----------------------------------------------------
    //                                                Insert
    //                                                ------
    @Override
    protected void setupInsertMethodByAuto(final Method method) {
        checkAutoUpdateMethod(method);
        final String[] propertyNames = getPersistentPropertyNames(method);
        final SqlCommand command;
        if (isUpdateSignatureForBean(method)) {
            final ${glInternalInsertAutoDynamicCommand} cmd = new ${glInternalInsertAutoDynamicCommand}();
            cmd.setBeanMetaData(getBeanMetaData());
            cmd.setDataSource(dataSource);
            
            // It is unnecessary for DBFlute!
            // cmd.setNotSingleRowUpdatedExceptionClass(getNotSingleRowUpdatedExceptionClass(method));
            
            cmd.setPropertyNames(propertyNames);
            cmd.setStatementFactory(statementFactory);
            cmd.setCheckSingleRowUpdate(isCheckSingleRowUpdate(method));
            command = cmd;
        } else {
            boolean returningRows = false;
            if (int[].class.isAssignableFrom(method.getReturnType())) {
                returningRows = true;
            }
            final ${glInternalInsertBatchAutoStaticCommand} cmd = new ${glInternalInsertBatchAutoStaticCommand}(
                    dataSource, statementFactory, getBeanMetaData(),
                    propertyNames, returningRows);
            command = cmd;
        }
        putSqlCommand(method.getName(), command);
    }

    // -----------------------------------------------------
    //                                                Update
    //                                                ------
    @Override
    protected void setupUpdateMethodByAuto(final Method method) {
        if (isFirstArgumentConditionBean(method)) {
            final SqlCommand cmd = new ${glInternalUpdateQueryAutoDynamicCommand}(dataSource, statementFactory);
            putSqlCommand(method.getName(), cmd);
            return;
        }
        checkAutoUpdateMethod(method);
        final String[] propertyNames = getPersistentPropertyNames(method);
        SqlCommand cmd;
        if (isUpdateSignatureForBean(method)) {
            if (isUnlessNull(method.getName())) {
                cmd = createInternalUpdateAutoDynamicCommand(method, propertyNames);
            } else if (isModifiedOnly(method.getName())) {
                cmd = createInternalUpdateModifiedOnlyCommand(method, propertyNames);
            } else {
                cmd = createInternalUpdateAutoStaticCommand(method, propertyNames);
            }
        } else {
            boolean returningRows = false;
            if (int[].class.isAssignableFrom(method.getReturnType())) {
                returningRows = true;
            }
            cmd = createInternalUpdateBatchAutoStaticCommand(method, propertyNames, returningRows);
        }
        putSqlCommand(method.getName(), cmd);
    }

    protected UpdateAutoStaticCommand createInternalUpdateAutoStaticCommand(final Method method, final String[] propertyNames) {
        final UpdateAutoStaticCommand cmd = new UpdateAutoStaticCommand(dataSource, statementFactory, beanMetaData, propertyNames);
        cmd.setCheckSingleRowUpdate(isCheckSingleRowUpdate(method));
        return cmd;
    }
    
    protected ${glInternalUpdateAutoDynamicCommand} createInternalUpdateAutoDynamicCommand(Method method, String[] propertyNames) {
        final ${glInternalUpdateAutoDynamicCommand} cmd = newUpdateAutoDynamicCommand(method, dataSource, statementFactory);
        cmd.setBeanMetaData(createBeanMetaData4UpdateDeleteByAuto(method));// Extension Point!
        cmd.setPropertyNames(propertyNames);
        cmd.setCheckSingleRowUpdate(!isNonstrictMethod(method));
        
        // It is unnecessary for DBFlute!
        // cmd.setNotSingleRowUpdatedExceptionClass(getNotSingleRowUpdatedExceptionClass(method));
        
        cmd.setVersionNoAutoIncrementOnMemory(isUpdateVersionNoAutoIncrementOnMemory(method));
        return cmd;
    }

    protected ${glInternalUpdateAutoDynamicCommand} newUpdateAutoDynamicCommand(Method method, DataSource ds, StatementFactory sf) {
        return new ${glInternalUpdateAutoDynamicCommand}(ds, sf);
    }

    protected ${glInternalUpdateModifiedOnlyCommand} createInternalUpdateModifiedOnlyCommand(final Method method, final String[] propertyNames) {
        final ${glInternalUpdateModifiedOnlyCommand} cmd = newInternalUpdateModifiedOnlyCommand(method, dataSource, statementFactory);
        cmd.setBeanMetaData(createBeanMetaData4UpdateDeleteByAuto(method));// Extension Point!
        cmd.setPropertyNames(propertyNames);
        cmd.setCheckSingleRowUpdate(!isNonstrictMethod(method));
        
        // It is unnecessary for DBFlute!
        // cmd.setNotSingleRowUpdatedExceptionClass(getNotSingleRowUpdatedExceptionClass(method));
        
        cmd.setVersionNoAutoIncrementOnMemory(isUpdateVersionNoAutoIncrementOnMemory(method));
        return cmd;
    }

    protected ${glInternalUpdateModifiedOnlyCommand} newInternalUpdateModifiedOnlyCommand(Method method, DataSource ds, StatementFactory sf) {
        return new ${glInternalUpdateModifiedOnlyCommand}(ds, sf);
    }

    protected ${glInternalUpdateBatchAutoStaticCommand} createInternalUpdateBatchAutoStaticCommand(final Method method, final String[] propertyNames, boolean returningRows) {
        return new ${glInternalUpdateBatchAutoStaticCommand}(dataSource, statementFactory
                                                      , createBeanMetaData4UpdateDeleteByAuto(method), propertyNames, returningRows
                                                      , isUpdateVersionNoAutoIncrementOnMemory(method)) {
            @Override
            protected ${glInternalUpdateBatchAutoHandler} newInternalBatchAutoHandler() {
                return new ${glInternalUpdateBatchAutoHandler}(getDataSource(), getStatementFactory(), getBeanMetaData(), getPropertyTypes()) {
                    @Override
                    protected int[] executeBatch(PreparedStatement ps, List<?> list) {
                        final int[] result = super.executeBatch(ps, list);
                        try {
                            handleBatchUpdateResultWithOptimisticLock(ps, list, result, method);
                        } catch (SQLException e) {
                            handleSQLException(e, ps, false, list);
                            return null;// Unreachable!
                        }
                        return result;
                    }
                };
            }
        };
    }

    // -----------------------------------------------------
    //                                                Delete
    //                                                ------
    @Override
    protected void setupDeleteMethodByAuto(final Method method) {
        if (isFirstArgumentConditionBean(method)) {
            final SqlCommand cmd = new ${glInternalDeleteQueryAutoDynamicCommand}(dataSource, statementFactory);
            putSqlCommand(method.getName(), cmd);
            return;
        }
        checkAutoUpdateMethod(method);
        final String[] propertyNames = getPersistentPropertyNames(method);
        final SqlCommand cmd;
        if (isUpdateSignatureForBean(method)) {
            cmd = createInternalDeleteAutoStaticCommand(method, propertyNames);
        } else {
            boolean returningRows = false;
            if (int[].class.isAssignableFrom(method.getReturnType())) {
                returningRows = true;
            }
            cmd = createInternalDeleteBatchAutoStaticCommand(method, propertyNames, returningRows);
        }
        putSqlCommand(method.getName(), cmd);
    }

    protected ${glInternalDeleteAutoStaticCommand} createInternalDeleteAutoStaticCommand(final Method method, final String[] propertyNames) {
        final ${glInternalDeleteAutoStaticCommand} cmd = new ${glInternalDeleteAutoStaticCommand}(dataSource, statementFactory, createBeanMetaData4UpdateDeleteByAuto(method), propertyNames);
        cmd.setCheckSingleRowUpdate(!isNonstrictMethod(method));
        return cmd;
    }

    protected ${glInternalDeleteBatchAutoStaticCommand} createInternalDeleteBatchAutoStaticCommand(final Method method, final String[] propertyNames, boolean returningRows) {
        return new ${glInternalDeleteBatchAutoStaticCommand}(dataSource, statementFactory, createBeanMetaData4UpdateDeleteByAuto(method), propertyNames, returningRows) {
            @Override
            protected ${glInternalDeleteBatchAutoHandler} newInternalBatchAutoHandler() {
                return new ${glInternalDeleteBatchAutoHandler}(getDataSource(), getStatementFactory(), getBeanMetaData(), getPropertyTypes()) {
                    @Override
                    protected int[] executeBatch(PreparedStatement ps, List<?> list) {
                        final int[] result = super.executeBatch(ps, list);
                        try {
                            handleBatchUpdateResultWithOptimisticLock(ps, list, result, method);
                        } catch (SQLException e) {
                            handleSQLException(e, ps, false, list);
                            return null;// Unreachable!
                        }
                        return result;
                    }
                };
            }
        };
    }

    // -----------------------------------------------------
    //                                         Common Helper
    //                                         -------------
    protected BeanMetaData createBeanMetaData4UpdateDeleteByAuto(Method method) {
        if (isNonstrictMethod(method)) {
            return createNonConcurrencyBmdFactory().createBeanMetaData(getBeanClass());
        } else {
            return getBeanMetaData();
        }
    }
    
    protected boolean isUpdateVersionNoAutoIncrementOnMemory(Method method) {
        return !isNonstrictMethod(method);
    }

    protected boolean isNonstrictMethod(Method method) {
        return method.getName().contains("Nonstrict");
    }

    protected BeanMetaDataFactory createNonConcurrencyBmdFactory() {
        final ${glS2BeanMetaDataFactoryImpl} nonConcurrencyBmdFactory = new ${glS2BeanMetaDataFactoryImpl}() {
            protected BeanMetaDataImpl createBeanMetaDataImpl() {
                return new BeanMetaDataImpl() {
                    public boolean hasVersionNoPropertyType() {
                        return false;
                    }

                    public boolean hasTimestampPropertyType() {
                        return false;
                    }
                };
            }
        };
        nonConcurrencyBmdFactory.setAnnotationReaderFactory(this.annotationReaderFactory);
        nonConcurrencyBmdFactory.setPropertyTypeFactoryBuilder(this.propertyTypeFactoryBuilder);
        nonConcurrencyBmdFactory.setRelationPropertyTypeFactoryBuilder(this.relationPropertyTypeFactoryBuilder);
        nonConcurrencyBmdFactory.setTableNaming(this.tableNaming);
        nonConcurrencyBmdFactory.setDataSource(this.dataSource);
        nonConcurrencyBmdFactory.setDaoNamingConvention(this.daoNamingConvention);
        nonConcurrencyBmdFactory.setBeanEnhancer(this.beanEnhancer);
        return nonConcurrencyBmdFactory;
    }

    protected boolean isFirstArgumentConditionBean(final Method method) {
        final Class<?>[] pmbTypes = method.getParameterTypes();
        return pmbTypes.length > 0 && ${glConditionBeanInterfaceName}.class.isAssignableFrom(pmbTypes[0]);
    }

    protected void handleBatchUpdateResultWithOptimisticLock(PreparedStatement ps, List<?> list, int[] result, Method method) throws SQLException {
        if (${glConditionBeanContextName}.isOracle()) {
            final int updateCount = ps.getUpdateCount();
            handleBatchUpdateResultWithOptimisticLockByUpdateCount(list, updateCount, method);
        } else {
            handleBatchUpdateResultWithOptimisticLockByResult(list, result, method);
        }
    }

    protected void handleBatchUpdateResultWithOptimisticLockByUpdateCount(List<?> list, int updateCount, Method method) {
        if (list.isEmpty()) {
            return;// for Safety!
        }
        if (updateCount < 0) {
            return;// for Safety!
        }
        final int entityCount = list.size();
        if (updateCount < entityCount) {
            if (isNonstrictMethod(method)) {
                String msg = "The entity have already deleted:";
                msg = msg + " updateCount=" + updateCount;
                msg = msg + " entityCount=" + entityCount;
                msg = msg + " allEntities=" + list;
                throw new ${glEntityAlreadyDeletedException}(msg);
            } else {
                throw new ${glBatchEntityAlreadyUpdatedException}(list.get(0), 0, updateCount);
            }
        }
    }

    protected void handleBatchUpdateResultWithOptimisticLockByResult(List<?> list, Object result, Method method) {
        if (list.isEmpty()) {
            return;// for Safety!
        }
        if (!(result instanceof int[])) {
            return;// for Safety!
        }
        final int[] updatedCountArray = (int[])result;
        final int entityCount = list.size();
        int index = 0;
        boolean alreadyUpdated = false;
        for (int oneUpdateCount : updatedCountArray) {
            if (entityCount <= index) {
                break;// for Safety!
            }
            if (oneUpdateCount == 0) {
                alreadyUpdated = true;
                break;
            } else if (oneUpdateCount > 1) {
                String msg = "The entity updated two or more records in batch update:";
                msg = msg + " entity=" + list.get(index);
                msg = msg + " updatedCount=" + oneUpdateCount;
                msg = msg + " allEntities=" + list;
                throw new ${glEntityDuplicatedException}(msg);
            }
            ++index;
        }
        if (alreadyUpdated) {
            int updateCount = 0;
            for (int oneUpdateCount : updatedCountArray) {
                updateCount = updateCount + oneUpdateCount;
            }
            if (isNonstrictMethod(method)) {
                String msg = "The entity have already deleted:";
                msg = msg + " entity=" + list.get(index);
                msg = msg + " updateCount=" + updateCount;
                msg = msg + " allEntities=" + list;
                throw new ${glEntityAlreadyDeletedException}(msg);
            } else {
                throw new ${glBatchEntityAlreadyUpdatedException}(list.get(index), 0, updateCount);
            }
        }
    }

    // ===================================================================================
    //                                                                 OutsideSql Override
    //                                                                 ===================
    // -----------------------------------------------------
    //                                     Normal OutsideSql
    //                                     -----------------
    @Override
    protected void setupSelectMethodByManual(Method method, String sql) {// Contains SQL-Annotation
        final Class<?>[] pmbTypes = method.getParameterTypes();
        final String[] argNames = this.daoAnnotationReader.getArgNames(method);
        final Class<?>[] argTypes;
        if (pmbTypes != null && pmbTypes.length > 0
                && ${glCursorHandlerName}.class.isAssignableFrom(pmbTypes[pmbTypes.length-1])) {
            argTypes = new Class<?>[pmbTypes.length - 1];
            for (int i=0; i < pmbTypes.length - 1; i++) {
                argTypes[i] = pmbTypes[i];
            }
        } else {
            argTypes = pmbTypes;
        }
        final BeanMetaData myBeanMetaData = getOutsideSqlBeanMetaData(method);
        registerSqlCommand(method.getName(), method, sql, argNames, argTypes, myBeanMetaData);
    }

    protected BeanMetaData getOutsideSqlBeanMetaData(Method method) {
        final Class beanClass4SelectMethodByManual = getOutsideSqlDefaultBeanClass(method);
        if (beanClass4SelectMethodByManual.equals(getBeanClass())) {
            return getBeanMetaData();
        }
        return createOutsideSqlCustomizeBeanMetaDataFactory().createBeanMetaData(getOutsideSqlDefaultBeanClass(method));
    }

	// @jflute -- This override causes exception, it's pending...
	//            This is for to use QLog about SQL-Annotation. But the priority is very low. 
	// 
    // @Override
    // protected void setupUpdateMethodByManual(Method method, final String sql) {// Contains SQL-Annotation
    //     final ${glInternalUpdateDynamicCommand} cmd = new ${glInternalUpdateDynamicCommand}(dataSource, statementFactory);
    //     cmd.setSql(sql);
    //     String[] argNames = daoAnnotationReader.getArgNames(method);
    //     if (argNames.length == 0 && isUpdateSignatureForBean(method)) {
    //         argNames = new String[] { StringUtil.decapitalize(ClassUtil.getShortClassName(beanClass)) };
    //     }
    // 
    //     // It is unnecessary for DBFlute!
    //     // cmd.setNotSingleRowUpdatedExceptionClass(getNotSingleRowUpdatedExceptionClass(method));
    // 
    //     registerSqlCommand(method.getName(), method, sql, argNames, method.getParameterTypes(), cmd);
    // }

    // -----------------------------------------------------
    //                                  Specified OutsideSql
    //                                  --------------------
    // - - - - - - - - - - - -
    //                  Select
    //                   - - -
    protected void setupSpecifiedOutsideSqlSelectCommand(String sqlCommandKey, Method method, ${glOutsideSqlContextName} outsideSqlContext) {
        // - - - - - - - - - - - - - - - - - - - - - - -
        // The attribute of Specified-OutsideSqlContext.
        // - - - - - - - - - - - - - - - - - - - - - - -
        final String sql = outsideSqlContext.readFilteredOutsideSql(getSqlFileEncoding(), dbms.getSuffix());
        final Object pmb = outsideSqlContext.getParameterBean();
        final Object resultTypeSpecification = outsideSqlContext.getResultTypeSpecification();

        // - - - - - - - - - - - - - - -
        // The attribute of SqlCommand.
        // - - - - - - - - - - - - - - -
        final String[] argNames = (pmb != null ? new String[] {"pmb"} : new String[]{});
        final Class<?>[] argTypes = (pmb != null ? new Class<?>[] {pmb.getClass()} : new Class<?>[]{});

        // - - - - - - - - - - - - - - - -
        // Create customized BeanMetaData.
        // - - - - - - - - - - - - - - - -
        final Class<?> lastestArguementType = method.getParameterTypes()[method.getParameterTypes().length-1];
        final ResultSetHandler myResultSetHandler;
        if (Class.class.isAssignableFrom(lastestArguementType)) {
            // - - - - - - - -
            // EntityHandling
            // - - - - - - - -
            final Class<?> customizeEntityType = (Class<?>)resultTypeSpecification;
            final BeanMetaData myBeanMetaData = createSpecifiedOutsideSqlCustomizeBeanMetaData(customizeEntityType);
            if (List.class.isAssignableFrom(method.getReturnType())) {
                myResultSetHandler = createSpecifiedOutsideSqlCustomizeBeanListResultSetHandler(myBeanMetaData, customizeEntityType);
            } else {
                throw new UnsupportedOperationException("The return type of method is unsupported: method.getReturnType()=" + method.getReturnType());
                // myResultSetHandler = createSpecifiedOutsideSqlCustomizeBeanResultSetHandler(myBeanMetaData, customizeEntityType);
            }
        } else if (${glCursorHandlerName}.class.isAssignableFrom(lastestArguementType)) {
            // - - - - - - - -
            // CursorHandling
            // - - - - - - - -
            final BeanMetaData myBeanMetaData = createSpecifiedOutsideSqlCursorBeanMetaData(method);
            myResultSetHandler = createSpecifiedOutsideSqlCursorResultSetHandler(myBeanMetaData);
        } else {
            String msg = "The lastestArguementType is unsupported:";
            msg = msg + " lastestArguementType=" + lastestArguementType;
            msg = msg + " method=" + method;
            throw new IllegalStateException(msg);
        }

        // - - - - - - - - - - -
        // Register Sql-Command.
        // - - - - - - - - - - -
        registerSqlCommand(sqlCommandKey, method, sql, argNames, argTypes, myResultSetHandler);
    }

    protected BeanMetaData createSpecifiedOutsideSqlCustomizeBeanMetaData(Class clazz) {
        return createOutsideSqlCustomizeBeanMetaDataFactory().createBeanMetaData(clazz);
    }

// [Unsupported]
// The return type of method is unsupported!
// Because the method of outside-sql that selects one entity is unnecessary!
//
//    /**
//     * Create the handler of result set of specified outside-sql for customize bean.
//     * 
//     * @param specifiedBeanMetaData Specified bean meta data. (NotNull)
//     * @param customizeEntityType The type of customize entity. (NotNull)
//     * @return The handler of result set. (NotNull)
//     */
//    protected ResultSetHandler createSpecifiedOutsideSqlCustomizeBeanResultSetHandler(BeanMetaData specifiedBeanMetaData, Class<?> customizeEntityType) {
//        final ValueType valueType = ValueTypes.getValueType(customizeEntityType);
//        if (valueType == null || !valueType.equals(ValueTypes.OBJECT)) {
//            return new org.seasar.extension.jdbc.impl.ObjectResultSetHandler();
//        }
//        return new org.seasar.dao.impl.BeanMetaDataResultSetHandler(specifiedBeanMetaData, new RowCreatorExtension(), new RelationRowCreatorExtension());
//    }

    /**
     * Create the handler of result set of specified outside-sql for the list of customize bean.
     * @param specifiedBeanMetaData Specified bean meta data. (NotNull)
     * @param customizeEntityType The type of customize entity. (NotNull)
     * @return The handler of result set. (NotNull)
     */
    protected ResultSetHandler createSpecifiedOutsideSqlCustomizeBeanListResultSetHandler(BeanMetaData specifiedBeanMetaData, Class<?> customizeEntityType) {
        final ValueType valueType = ValueTypes.getValueType(customizeEntityType);
        if (valueType == null || !valueType.equals(ValueTypes.OBJECT)) {
            return new InternalObjectListResultSetHandler(valueType);
        }
        return new ${glInternalBeanListMetaDataResultSetHandler}(specifiedBeanMetaData, new RowCreatorExtension(), new RelationRowCreatorExtension());
    }

    protected class InternalObjectListResultSetHandler implements ResultSetHandler {
        private ValueType valueType;
        public InternalObjectListResultSetHandler(ValueType valueType) {
            this.valueType = valueType;
        }
        public Object handle(ResultSet rs) throws SQLException {
            final List<Object> ret = new ArrayList<Object>();
            while (rs.next()) {
                ret.add(valueType.getValue(rs, 1));
            }
            return ret;
        }
    }

    protected BeanMetaData createSpecifiedOutsideSqlCursorBeanMetaData(Method method) {
        return createOutsideSqlCustomizeBeanMetaDataFactory().createBeanMetaData(getOutsideSqlDefaultBeanClass(method));
    }

    protected ResultSetHandler createSpecifiedOutsideSqlCursorResultSetHandler(BeanMetaData specifiedBeanMetaData) {
        return new org.seasar.extension.jdbc.impl.ObjectResultSetHandler();// This is dummy for cursor handling!
    }

    // - - - - - - - - - - - -
    //                 Execute
    //                 - - - -
    protected void setupSpecifiedOutsideSqlExecuteCommand(String sqlCommandKey, Method method, ${glOutsideSqlContextName} outsideSqlContext) {
        // - - - - - - - - - - - - - - - - - - - - - - -
        // The attribute of Specified-OutsideSqlContext.
        // - - - - - - - - - - - - - - - - - - - - - - -
        final String sql = outsideSqlContext.readFilteredOutsideSql(getSqlFileEncoding(), dbms.getSuffix());
        final Object pmb = outsideSqlContext.getParameterBean();

        // - - - - - - - - - - - - - - -
        // The attribute of SqlCommand.
        // - - - - - - - - - - - - - - -
        final String[] argNames = (pmb != null ? new String[] {"pmb"} : new String[]{});
        final Class<?>[] argTypes = (pmb != null ? new Class<?>[] {pmb.getClass()} : new Class<?>[]{});

        final ${glInternalUpdateDynamicCommand} cmd = new ${glInternalUpdateDynamicCommand}(dataSource, statementFactory) {
            @Override
            public Object execute(Object[] args) {
                if (args.length != 3) {
                    String msg = "Internal Error! OutsideSqlDao.execute() should have 3 arguements: args.length=" + args.length;
                    throw new IllegalStateException(msg);
                }
                Object arg = args[1];
                return super.execute(new Object[] {arg});
            }
        };
        
        // It is unnecessary for DBFlute!
        // cmd.setNotSingleRowUpdatedExceptionClass(getNotSingleRowUpdatedExceptionClass(method));
        
        registerSqlCommand(sqlCommandKey, method, sql, argNames, argTypes, cmd);
    }

	// - - - - - - - - - - - -
    //          Call Procedure
    //           - - - - - - -
    protected void setupSpecifiedOutsideSqlCallCommand(String sqlCommandKey, Method method, ${glOutsideSqlContextName} outsideSqlContext) {
        // - - - - - - - - - - - - - - - - - - - - - - -
        // The attribute of Specified-OutsideSqlContext.
        // - - - - - - - - - - - - - - - - - - - - - - -
        final Object pmb = outsideSqlContext.getParameterBean();
        final String procedureName = outsideSqlContext.getOutsideSqlPath();

        // - - - - - - - - - - - - - - -
        // The attribute of SqlCommand.
        // - - - - - - - - - - - - - - -
        final InternalProcedureMetaDataFactory myProcedureMetaDataFactory = new InternalProcedureMetaDataFactory();
        myProcedureMetaDataFactory.setValueTypeFactory(valueTypeFactory);
        final Class<?> pmbType = pmb != null ? pmb.getClass() : null;
        final ProcedureMetaData metaData = myProcedureMetaDataFactory.createProcedureMetaData(procedureName, pmbType);
        final ${glInternalProcedureCommand} cmd = createInternalProcedureCommand(method, metaData);
        putSqlCommand(sqlCommandKey, cmd);
    }

    protected ${glInternalProcedureCommand} createInternalProcedureCommand(Method method, ProcedureMetaData metaData) {
        final ResultSetHandler resultSetHandler = createResultSetHandler(method);
        return new ${glInternalProcedureCommand}(dataSource, resultSetHandler, statementFactory, resultSetFactory, metaData);
    }
	
    // -----------------------------------------------------
    //                                  Common of OutsideSql
    //                                  --------------------
    protected BeanMetaDataFactory createOutsideSqlCustomizeBeanMetaDataFactory() {
        final ${glBeanMetaDataFactoryImpl} originalBmdFactory = new ${glBeanMetaDataFactoryImpl}() {
            protected BeanMetaDataImpl createBeanMetaDataImpl() {
                return newOutsideSqlCustomizeBeanMetaDataImpl();
            }
        };
        originalBmdFactory.setAnnotationReaderFactory(this.annotationReaderFactory);
        originalBmdFactory.setPropertyTypeFactoryBuilder(createOutsideSqlPropertyTypeFactoryBuilder());
        originalBmdFactory.setRelationPropertyTypeFactoryBuilder(this.relationPropertyTypeFactoryBuilder);
        originalBmdFactory.setTableNaming(this.tableNaming);
        originalBmdFactory.setDataSource(this.dataSource);
        originalBmdFactory.setDaoNamingConvention(this.daoNamingConvention);
        originalBmdFactory.setBeanEnhancer(this.beanEnhancer);
        return originalBmdFactory;
    }

    protected BeanMetaDataImpl newOutsideSqlCustomizeBeanMetaDataImpl() {
        return new OutsideSqlCustomizeBeanMetaDataImpl();
    }

    protected static class OutsideSqlCustomizeBeanMetaDataImpl extends BeanMetaDataImpl {
        // Though nothing to override, it uses original class just in case.
    }

    protected ${glDaoPropertyTypeFactoryBuilderExtension} createOutsideSqlPropertyTypeFactoryBuilder() {
        final ${glDaoPropertyTypeFactoryBuilderExtension} impl = new ${glDaoPropertyTypeFactoryBuilderExtension}();
        if (columnNaming == null) {
            String msg = "Internal Error! The columnNaming should not be null! {Failed to Injection!}";
            throw new IllegalStateException(msg);
        }
        impl.setColumnNaming(columnNaming);
        impl.setValueTypeFactory(valueTypeFactory);
        return impl;
    }

    protected Class getOutsideSqlDefaultBeanClass(Method method) {
        final Class retType = method.getReturnType();
        if (java.util.List.class.isAssignableFrom(retType)) {
            final Class elementType = InternalMethodUtil.getElementTypeOfListFromReturnMethod(method);
            if (elementType != null) {
                return elementType;
            } else {
                return getBeanClass();
            }
        } else if (retType.isArray()) {
            return retType.getComponentType();
        } else if (retType.isPrimitive() || !ValueTypes.getValueType(retType).equals(ValueTypes.OBJECT)) {
            return getBeanClass();
        } else {
            return retType;
        }
    }
    
    protected void registerSqlCommand(String sqlCommandKey, Method method, String sql, String[] argNames, Class[] argTypes, BeanMetaData myBeanMetaData) {
        registerSqlCommand(sqlCommandKey, method, sql, argNames, argTypes, createResultSetHandler(myBeanMetaData, method));
    }

    protected void registerSqlCommand(String sqlCommandKey, Method method, String sql, String[] argNames, Class[] argTypes, ResultSetHandler myResultSetHandler) {
        final ${glSelectDynamicCommand} cmd = createCustomizeSelectDynamicCommand(myResultSetHandler);
        registerSqlCommand(sqlCommandKey, method, sql, argNames, argTypes, cmd);
    }

    protected void registerSqlCommand(String sqlCommandKey, Method method, String sql, String[] argNames, Class[] argTypes, ${glSelectDynamicCommand} cmd) {
        cmd.setSql(sql);
        cmd.setArgNames(argNames);
        cmd.setArgTypes(argTypes);
        this.sqlCommands.put(sqlCommandKey, cmd);
    }

    protected void registerSqlCommand(String sqlCommandKey, Method method, String sql, String[] argNames, Class[] argTypes, ${glInternalUpdateDynamicCommand} cmd) {
        cmd.setSql(sql);
        cmd.setArgNames(argNames);
        cmd.setArgTypes(argTypes);
        this.sqlCommands.put(sqlCommandKey, cmd);
    }

    // ===================================================================================
    //                                                                     Common Handlnig
    //                                                                     ===============
    @Override
    protected void putSqlCommand(String methodName, SqlCommand cmd) {
        sqlCommands.put(methodName, cmd);
    }
    
    protected boolean isCheckSingleRowUpdate(Method method) {
        return checkSingleRowUpdateForAll & daoAnnotationReader.isCheckSingleRowUpdate(method);
    }

    // ===================================================================================
    //                                             Customize SelectDynamicCommand Creation
    //                                             =======================================
    /**
     * Create the customize select dynamic command that is for all select SQL on DBFlute.
     * @param handler The handler of result set. (NotNull)
     * @return The customize select dynamic command. (NotNull)
     */
    protected ${glSelectDynamicCommand} createCustomizeSelectDynamicCommand(ResultSetHandler handler) {
        return new ${glSelectDynamicCommand}(dataSource, statementFactory, handler, resultSetFactory);
    }

    // ===================================================================================
    //                                                           ResultSetHandler Override
    //                                                           =========================
    @Override
    protected ResultSetHandler createResultSetHandler(Method method) {
        return this.resultSetHandlerFactory.getResultSetHandler(daoAnnotationReader, beanMetaData, method);
    }

    protected ResultSetHandler createResultSetHandler(BeanMetaData specifiedBeanMetaData, Method method) {// For specified BeanMetaData
        return this.resultSetHandlerFactory.getResultSetHandler(daoAnnotationReader, specifiedBeanMetaData, method);
    }

    // ===================================================================================
    //                                                                      JDBC Delegator
    //                                                                      ==============
    protected Connection getConnection() {
        if (dataSource == null) {
            throw new IllegalStateException("The dataSource should not be null!");
        }
        try {
            return dataSource.getConnection();
        } catch (SQLException e) {
            handleSQLException(e, null);
            return null;// Unreachable!
        }
    }

    protected DatabaseMetaData getMetaData(Connection conn) {
        try {
            return conn.getMetaData();
        } catch (SQLException e) {
            handleSQLException(e, null);
            return null;// Unreachable!
        }
    }

    protected String getDatabaseProductName(DatabaseMetaData dbMetaData) {
        try {
            return dbMetaData.getDatabaseProductName();
        } catch (SQLException e) {
            handleSQLException(e, null);
            return null;// Unreachable!
        }
    }

    protected void close(Connection conn) {
        if (conn == null) {
            return;
        }
        try {
            conn.close();
        } catch (SQLException e) {
            handleSQLException(e, null);
        }
    }

    // ===================================================================================
    //                                                                  Exception Handlnig
    //                                                                  ==================
    protected void handleSQLException(SQLException e, Statement statement) {
        new SQLExceptionHandler().handleSQLException(e, statement);
    }

    // ===================================================================================
    //                                                                       Vert Internal
    //                                                                       =============
    protected static class InternalMethodUtil {
        public static Class getElementTypeOfListFromReturnMethod(Method method) {
            return InternalReflectionUtil.getElementTypeOfListFromReturnType(method);
        }
    }

    protected static class InternalReflectionUtil {
        public static Class<?> getElementTypeOfList(final Type parameterizedList) {
            if (!(parameterizedList instanceof ParameterizedType)) {
                return null;
            }

            final ParameterizedType parameterizedType = ParameterizedType.class.cast(parameterizedList);
            final Type rawType = parameterizedType.getRawType();
            if (!(rawType instanceof Class)) {
                return null;
            }

            final Class<?> rawClass = Class.class.cast(rawType);
            if (!rawClass.isAssignableFrom(List.class)) {
                return null;
            }

            final Type[] actualTypeArgument = parameterizedType.getActualTypeArguments();
            if (actualTypeArgument == null || actualTypeArgument.length != 1) {
                return null;
            }
            if (!(actualTypeArgument[0] instanceof Class)) {
                return null;
            }

            return Class.class.cast(actualTypeArgument[0]);
        }

        public static Class<?> getElementTypeOfListFromParameterType(final Method method, final int parameterPosition) {
            final Type[] pmbTypes = method.getGenericParameterTypes();
            return getElementTypeOfList(pmbTypes[parameterPosition]);
        }

        public static Class<?> getElementTypeOfListFromReturnType(final Method method) {
            return getElementTypeOfList(method.getGenericReturnType());
        }
    }

    // ===================================================================================
    //                                               ResultSetHandlerFactoryImpl Extension
    //                                               =====================================
    public static class ResultSetHandlerFactoryExtension extends ResultSetHandlerFactoryImpl {
        public ResultSetHandlerFactoryExtension() {
            super();
        }

        @Override
        protected RowCreator createRowCreator() {// [DAO-118] (2007/08/25)
            return new RowCreatorExtension();
        }

        @Override
        protected RelationRowCreator createRelationRowCreator() {
            return new RelationRowCreatorExtension();
        }
        
        @Override
        protected ResultSetHandler createBeanListMetaDataResultSetHandler(BeanMetaData beanMetaData) {
            return new ${glInternalBeanListMetaDataResultSetHandler}(beanMetaData, createRowCreator(), createRelationRowCreator());
        }
        
        @Override
        protected ResultSetHandler createBeanArrayMetaDataResultSetHandler(BeanMetaData beanMetaData) {
            return new ${glInternalBeanArrayMetaDataResultSetHandler}(beanMetaData, createRowCreator(), createRelationRowCreator());
        }
    }

    // ===================================================================================
    //                                                            RowCreatorImpl Extension
    //                                                            ========================
    protected static class RowCreatorExtension extends org.seasar.dao.impl.RowCreatorImpl {
    
        /** The key of DBMeta cache. */
        protected static final String DBMETA_CACHE_KEY = "df:DBMetaCache";

        @Override
        public Object createRow(ResultSet rs, Map propertyCache, Class beanClass) throws SQLException  {
            final Object row = newBean(beanClass);
            final ${glDBMetaInterfaceName} dbmeta = findDBMeta(row);
            final Set columnNameSet = propertyCache.keySet();
            String columnName = null;
            PropertyType pt = null;
            String propertyName = null;
            try {
                for (final Iterator ite = columnNameSet.iterator(); ite.hasNext();) {
                    columnName = (String) ite.next();
                    pt = (PropertyType) propertyCache.get(columnName);
                    propertyName = pt.getPropertyName();
                    if (dbmeta != null && dbmeta.hasEntityPropertySetupper(propertyName)) {
                        final ValueType valueType = pt.getValueType();
                        final Object value = valueType.getValue(rs, columnName);
                        dbmeta.setupEntityProperty(propertyName, row, value);
                    } else {
                        registerValue(rs, row, pt, columnName);
                    }
                }
            } catch (ClassCastException e) {
                if (_log.isWarnEnabled()) {
                    String msg = ClassCastException.class.getSimpleName() + " occurred while ResultSet Handling:";
                    _log.warn(msg + " target=" + beanClass.getSimpleName() + "." + propertyName + " dbmeta");
                }
                throwNonsenseClassCastException(row, dbmeta, e);
            } catch (SQLException e) {
                if (_log.isWarnEnabled()) {
                    String msg = SQLException.class.getSimpleName() + " occurred while ResultSet Handling:";
                    _log.warn(msg + " target=" + beanClass.getSimpleName() + "." + propertyName);
                }
                throw e;
            }
            return row;
        }

        /**
         * @param row The object of row. (NotNull)
         * @return The interface of DBMeta. (Nullable: If it's null, it means NotFound.)
         */
        protected ${glDBMetaInterfaceName} findDBMeta(Object row) {
            return EntityPropertySetupperHandler.findCachedDBMeta(row);
        }

        protected void throwNonsenseClassCastException(Object entity, ${glDBMetaInterfaceName} dbmeta, ClassCastException e) {
            String msg = "Look! Read the message below." + getLineSeparator();
            msg = msg + "/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *" + getLineSeparator();
            msg = msg + "Nonsense ClassCastException occured!" + getLineSeparator();
            msg = msg + getLineSeparator();
            msg = msg + "[Advice]" + getLineSeparator();
            msg = msg + "This exception may be from ClassLoader Headache about HotDeploy." + getLineSeparator();
            msg = msg + "Please add the ignore-package setting to convention.dicon like as follows:" + getLineSeparator();
            msg = msg + "  For example:" + getLineSeparator();
            msg = msg + "    <initMethod name=”addIgnorePackageName”>" + getLineSeparator();
            msg = msg + "        <arg>”com.example.xxx.dbflute”</arg>" + getLineSeparator();
            msg = msg + "    </initMethod>" + getLineSeparator();
            msg = msg + getLineSeparator();
            msg = msg + "[Exception Message]" + getLineSeparator() + e.getMessage() + getLineSeparator();
            msg = msg + getLineSeparator();
            msg = msg + "[Target Entity]" + getLineSeparator() + entity + getLineSeparator();
            msg = msg + getLineSeparator();
            msg = msg + "[Target Entity Class Loader]" + getLineSeparator() + entity.getClass().getClassLoader() + getLineSeparator();
            msg = msg + getLineSeparator();
            msg = msg + "[Target DBMeta]" + getLineSeparator() + dbmeta + getLineSeparator();
            msg = msg + getLineSeparator();
            msg = msg + "[Target DBMeta Class Loader]" + getLineSeparator() + dbmeta.getClass().getClassLoader() + getLineSeparator();
            msg = msg + "* * * * * * * * * */";
            throw new NonsenseClassCastException(msg, e);
        }
        
        protected String getLineSeparator() {
            return ${glSimpleSystemUtil}.getLineSeparator();
        }
    }

    public static class NonsenseClassCastException extends RuntimeException {
        private static final long serialVersionUID = 1L;
        public NonsenseClassCastException(String msg, ClassCastException e) {
            super(msg, e);
        }
    }

    /**
     * The handler of setupper of entity property.
     */
    protected static class EntityPropertySetupperHandler {
        
        /** The key of DBMeta cache. */
        protected static final String DBMETA_CACHE_KEY = "df:DBMetaCache";
        
        public static ${glDBMetaInterfaceName} findCachedDBMeta(Object row) {
            if (!(row instanceof ${glEntityInterfaceName})) {
                return null;
            }
            final ${glEntityInterfaceName} entity = (${glEntityInterfaceName}) row;
            Map<Class<?>, ${glDBMetaInterfaceName}> dbmetaCache = (Map<Class<?>, ${glDBMetaInterfaceName}>)${glInternalMapContextName}.getObject(DBMETA_CACHE_KEY);
            if (dbmetaCache == null) {
                dbmetaCache = new HashMap<Class<?>, ${glDBMetaInterfaceName}>();
                ${glInternalMapContextName}.setObject(DBMETA_CACHE_KEY, dbmetaCache);
            }
            ${glDBMetaInterfaceName} dbmeta = dbmetaCache.get(entity.getClass());
            if (dbmeta != null) {
                return dbmeta;
            }
            dbmeta = entity.getDBMeta();
            dbmetaCache.put(entity.getClass(), dbmeta);
            return dbmeta;
        }
    }
    
    // ===================================================================================
    //                                                    RelationRowCreatorImpl Extension
    //                                                    ================================
    protected static class RelationRowCreatorExtension extends org.seasar.dao.impl.RelationRowCreatorImpl {
    
        @Override
        protected Object createRelationRow(RelationRowCreationResource res)
                throws SQLException {
            // - - - - - - - - - - - 
            // Recursive Call Point!
            // - - - - - - - - - - -
            if (!res.hasPropertyCacheElement()) {
                return null;
            }
            setupRelationKeyValue(res);
            setupRelationAllValue(res);
            return res.getRow();
        }
    
        @Override
        protected void setupRelationKeyValue(RelationRowCreationResource res) {
            final RelationPropertyType rpt = res.getRelationPropertyType();
            final BeanMetaData bmd = rpt.getBeanMetaData();
            for (int i = 0; i < rpt.getKeySize(); ++i) {
                final String columnName = rpt.getMyKey(i) + res.getBaseSuffix();
    
                if (!res.containsColumnName(columnName)) {
                    continue;
                }
                if (!res.hasRowInstance()) {
                    res.setRow(newRelationRow(rpt));
                }
                if (!res.containsRelKeyValueIfExists(columnName)) {
                    continue;
                }
                final Object value = res.extractRelKeyValue(columnName);
                if (value == null) {
                    continue;
                }
    
                final String yourKey = rpt.getYourKey(i);
                final PropertyType pt = bmd.getPropertyTypeByColumnName(yourKey);
                final PropertyDesc pd = pt.getPropertyDesc();
                pd.setValue(res.getRow(), value);
                continue;
            }
        }
    
        @Override
        protected void setupRelationAllValue(RelationRowCreationResource res) throws SQLException {
            final Map propertyCacheElement = res.extractPropertyCacheElement();
            final Set columnNameCacheElementKeySet = propertyCacheElement.keySet();
            for (final Iterator ite = columnNameCacheElementKeySet.iterator(); ite.hasNext();) {
                final String columnName = (String) ite.next();
                final PropertyType pt = (PropertyType) propertyCacheElement.get(columnName);
                res.setCurrentPropertyType(pt);
                if (!isValidRelationPerPropertyLoop(res)) {
                    res.clearRowInstance();
                    return;
                }
                setupRelationProperty(res);
            }
            if (!isValidRelationAfterPropertyLoop(res)) {
                res.clearRowInstance();
                return;
            }
            res.clearValidValueCount();
            if (res.hasNextRelationProperty() && (hasConditionBean(res) || res.hasNextRelationLevel())) {
                setupNextRelationRow(res);
            }
        }
        
        @Override
        protected void registerRelationValue(RelationRowCreationResource res, String columnName) throws SQLException {
            final PropertyType pt = res.getCurrentPropertyType();
            Object value = null;
            if (res.containsRelKeyValueIfExists(columnName)) {
                value = res.extractRelKeyValue(columnName);
            } else {
                final ValueType valueType = pt.getValueType();
                value = valueType.getValue(res.getResultSet(), columnName);
            }
            
            if (value != null) {
                res.incrementValidValueCount();
                final ${glDBMetaInterfaceName} dbmeta = findDBMeta(res.getRow());
                final String propertyName = pt.getPropertyName();
                if (dbmeta != null && dbmeta.hasEntityPropertySetupper(propertyName)) {
                    dbmeta.setupEntityProperty(propertyName, res.getRow(), value);
                } else {
                    final PropertyDesc pd = pt.getPropertyDesc();
                    pd.setValue(res.getRow(), value);
                }
            }
        }
        
        /**
         * @param row The object of row. (NotNull)
         * @return The interface of DBMeta. (Nullable: If it's null, it means NotFound.)
         */
        protected ${glDBMetaInterfaceName} findDBMeta(Object row) {
            return EntityPropertySetupperHandler.findCachedDBMeta(row);
        }
        
        @Override
        protected void setupPropertyCache(RelationRowCreationResource res) throws SQLException {
            // - - - - - - - - - - - 
            // Recursive Call Point!
            // - - - - - - - - - - -
            res.initializePropertyCacheElement();
    
            // Do only selected foreign property for performance if condition-bean exists.
            if (hasConditionBean(res)) {
                final ${glConditionBeanInterfaceName} cb = ${glConditionBeanContextName}.getConditionBeanOnThread();
                if (!cb.getSqlClause().hasSelectedForeignInfo(res.getRelationNoSuffix())) {
                    return;
                }
            }
            
            // Set up property cache about current beanMetaData.
            final BeanMetaData nextBmd = res.getRelationBeanMetaData();
            for (int i = 0; i < nextBmd.getPropertyTypeSize(); ++i) {
                final PropertyType pt = nextBmd.getPropertyType(i);
                res.setCurrentPropertyType(pt);
                if (!isTargetProperty(res)) {
                    continue;
                }
                setupPropertyCacheElement(res);
            }
            
            // Set up next relation.
            if (res.hasNextRelationProperty() && (hasConditionBean(res) || res.hasNextRelationLevel())) {
                res.backupRelationPropertyType();
                res.incrementCurrentRelationNestLevel();
                try {
                    setupNextPropertyCache(res, nextBmd);
                } finally {
                    res.restoreRelationPropertyType();
                    res.decrementCurrentRelationNestLevel();
                }
            }
        }
    
        @Override
        protected boolean isTargetProperty(org.seasar.dao.impl.RelationRowCreationResource res) throws java.sql.SQLException {
            final PropertyType pt = res.getCurrentPropertyType();
            if (!pt.getPropertyDesc().hasWriteMethod()) {
                return false;
            }
            if (java.util.List.class.isAssignableFrom(pt.getPropertyDesc().getPropertyType())) {
                return false;
            }
            return true;
        }

        @Override
        protected boolean isCreateDeadLink() {
            return false;
        }
        
        @Override
        protected int getLimitRelationNestLevel() {
            return 2;// for Compatible
        }
        
        @Override
        protected RelationRowCreationResource createResourceForRow(ResultSet rs,
                RelationPropertyType rpt, Set columnNames, Map relKeyValues,
                Map relationPropertyCache) throws SQLException {
            final RelationRowCreationResource res = new RelationRowCreationResourceExtension();
            res.setResultSet(rs);
            res.setRelationPropertyType(rpt);
            res.setColumnNames(columnNames);
            res.setRelKeyValues(relKeyValues);
            res.setRelationPropertyCache(relationPropertyCache);
            res.setBaseSuffix("");// as Default
            res.setRelationNoSuffix(buildRelationNoSuffix(rpt));
            res.setLimitRelationNestLevel(getLimitRelationNestLevel());
            res.setCurrentRelationNestLevel(1);// as Default
            res.setCreateDeadLink(isCreateDeadLink());
            return res;
        }
    
        @Override
        protected RelationRowCreationResource createResourceForPropertyCache(RelationPropertyType rpt, Set columnNames,
                Map relationPropertyCache, String baseSuffix, String relationNoSuffix, int limitRelationNestLevel)
                throws SQLException {
            final RelationRowCreationResource res = new RelationRowCreationResourceExtension();
            res.setRelationPropertyType(rpt);
            res.setColumnNames(columnNames);
            res.setRelationPropertyCache(relationPropertyCache);
            res.setBaseSuffix(baseSuffix);
            res.setRelationNoSuffix(relationNoSuffix);
            res.setLimitRelationNestLevel(limitRelationNestLevel);
            res.setCurrentRelationNestLevel(1);// as Default
            return res;
        }
        
        protected boolean isConditionBeanSelectedRelation(RelationRowCreationResource res) {
            if (hasConditionBean(res)) {
                final ${glConditionBeanInterfaceName} cb = ${glConditionBeanContextName}.getConditionBeanOnThread();
                if (cb.getSqlClause().hasSelectedForeignInfo(res.getRelationNoSuffix())) {
                    return true;
                }
            }
            return false;
        }
        
        protected boolean hasConditionBean(RelationRowCreationResource res) {
            return ${glConditionBeanContextName}.isExistConditionBeanOnThread();
        }
    }
    
    protected static class RelationRowCreationResourceExtension extends RelationRowCreationResource {
        protected Stack<RelationPropertyType> backupRelationPropertyType = new Stack<RelationPropertyType>();
        protected Stack<String> backupBaseSuffix = new Stack<String>();
        protected Stack<String> backupRelationSuffix = new Stack<String>();
        
        @Override
        public void backupRelationPropertyType() {
            backupRelationPropertyType.push(getRelationPropertyType());
        }
        
        @Override
        public void restoreRelationPropertyType() {
            setRelationPropertyType(backupRelationPropertyType.pop());
        }
        
        @Override
        public void backupSuffixAndPrepare(String baseSuffix, String additionalRelationNoSuffix) {
            backupBaseSuffixExtension();
            backupRelationNoSuffixExtension();
            setBaseSuffix(baseSuffix);
            addRelationNoSuffix(additionalRelationNoSuffix);
        }
        
        @Override
        public void restoreSuffix() {
            restoreBaseSuffixExtension();
            restoreRelationNoSuffixExtension();
        }
        
        protected void backupBaseSuffixExtension() {
            backupBaseSuffix.push(getBaseSuffix());
        }

        protected void restoreBaseSuffixExtension() {
            setBaseSuffix(backupBaseSuffix.pop());
        }
        
        protected void backupRelationNoSuffixExtension() {
            backupRelationSuffix.push(getRelationNoSuffix());
        }
        
        protected void restoreRelationNoSuffixExtension() {
            setRelationNoSuffix(backupRelationSuffix.pop());
        }
    }

    // ===================================================================================
    //                                                                           Procedure
    //                                                                           =========
    protected static class InternalProcedureMetaDataFactory {
        protected ValueTypeFactory valueTypeFactory;
        protected InternalFieldProcedureAnnotationReader annotationReader = new InternalFieldProcedureAnnotationReader();
        public ProcedureMetaData createProcedureMetaData(final String procedureName, final Class<?> pmbType) {
            final ProcedureMetaDataImpl metaData = new ProcedureMetaDataImpl(procedureName);
            if (pmbType == null) {
                return metaData;
            } else {
                if (!isDtoType(pmbType)) {
                    throw new IllegalStateException("The pmb type was Not DTO type: " + pmbType.getName());
                }
            }
            final BeanDesc pmbDesc = BeanDescFactory.getBeanDesc(pmbType);

            // *Point
            final Stack<Class<?>> stack = new Stack<Class<?>>();
            for (Class<?> clazz = pmbType; clazz != null && clazz != Object.class; clazz = clazz.getSuperclass()) {
                stack.push(clazz);
            }
            for ( ; !stack.isEmpty() ;) {
                final Class<?> clazz = stack.pop();
                registerParameterType(metaData, pmbDesc, clazz.getDeclaredFields());
            }

            return metaData;
        }
        protected void registerParameterType(ProcedureMetaDataImpl metaData, BeanDesc pmbDesc, Field[] fields) {
            for (Field field : fields) {
                if (!isInstanceField(field)) {
                    continue;
                }
                final ProcedureParameterType ppt = getProcedureParameterType(pmbDesc, field);
                if (ppt == null) {
                    continue;
                }
                metaData.addParameterType(ppt);
            }
        }
        protected ProcedureParameterType getProcedureParameterType(final BeanDesc dtoDesc, final Field field) {
            final String type = annotationReader.getProcedureParameter(dtoDesc, field);
            if (type == null) {
                return null;
            }
            field.setAccessible(true);
            final ProcedureParameterType ppt = new ProcedureParameterTypeImpl(field);
            if (type.equalsIgnoreCase("in")) {
                ppt.setInType(true);
            } else if (type.equalsIgnoreCase("out")) {
                ppt.setOutType(true);
            } else if (type.equalsIgnoreCase("inout")) {
                ppt.setInType(true);
                ppt.setOutType(true);
            } else if (type.equalsIgnoreCase("return")) {
                ppt.setOutType(true);
                ppt.setReturnType(true);
            } else {
                throw new IllegalParameterTypeRuntimeException(type);
            }
            final ValueType valueType = getValueType(dtoDesc, field);
            ppt.setValueType(valueType);
            return ppt;
        }
        protected ValueType getValueType(final BeanDesc dtoDesc, final Field field) {
            final String name = annotationReader.getValueType(dtoDesc, field);
            if (name != null) {
                return valueTypeFactory.getValueTypeByName(name);
            }
            final Class type = field.getType();
            if (List.class.isAssignableFrom(type)) {// is for out parameter cursor.
                if (${glConditionBeanContextName}.isOracle()) {
                    return ValueTypes.ORACLE_RESULT_SET;
                } else if (${glConditionBeanContextName}.isPostgreSql()) {
                    return ValueTypes.POSTGRE_RESULT_SET;
                } else {
                    return ValueTypes.SERIALIZABLE_BYTE_ARRAY;
                }
            }
            return valueTypeFactory.getValueTypeByClass(type);
        }
        protected boolean isInstanceField(final Field field) {
            final int mod = field.getModifiers();
            return !Modifier.isStatic(mod) && !Modifier.isFinal(mod);
        }
        protected boolean isDtoType(final Class clazz) {
            return !TypeUtil.isSimpleType(clazz) && !isContainerType(clazz);
        }
        protected boolean isContainerType(final Class clazz) {
            if (clazz == null) { throw new NullPointerException("clazz"); }
            return Collection.class.isAssignableFrom(clazz) || Map.class.isAssignableFrom(clazz) || clazz.isArray();
        }
        public void setValueTypeFactory(final ValueTypeFactory valueTypeFactory) {
            this.valueTypeFactory = valueTypeFactory;
        }
    }

    protected static class InternalFieldProcedureAnnotationReader {
        protected String PROCEDURE_PARAMETER_SUFFIX;
        protected String VALUE_TYPE_SUFFIX;
        public InternalFieldProcedureAnnotationReader() {
            PROCEDURE_PARAMETER_SUFFIX = "_PROCEDURE_PARAMETER";
            VALUE_TYPE_SUFFIX = "_VALUE_TYPE";
        }
        public String getProcedureParameter(BeanDesc dtoDesc, Field field) {
            String fieldName = removeInstanceVariablePrefix(field.getName());// *Point
            String annotationName = fieldName + PROCEDURE_PARAMETER_SUFFIX;
            if (dtoDesc.hasField(annotationName)) {
                Field f = dtoDesc.getField(annotationName);
                return (String) FieldUtil.get(f, null);
            } else {
                return null;
            }
        }
        public String getValueType(BeanDesc dtoDesc, Field field) {
            String fieldName = removeInstanceVariablePrefix(field.getName());// *Point
            String annotationName = fieldName + VALUE_TYPE_SUFFIX;
            if (dtoDesc.hasField(annotationName)) {
                Field f = dtoDesc.getField(annotationName);
                return (String) FieldUtil.get(f, null);
            } else {
                return null;
            }
        }
        protected String removeInstanceVariablePrefix(String fieldName) {
            return fieldName.startsWith("_") ? fieldName.substring("_".length()) : fieldName;
        }
    }

    // ===================================================================================
    //                                                                            Accessor
    //                                                                            ========
    // -----------------------------------------------------
    //                                     Sql File Encoding
    //                                     -----------------
    public String getSqlFileEncoding() {
        return sqlFileEncoding;
    }

    // -----------------------------------------------------
    //                                         Bean Enhancer
    //                                         -------------
    public BeanEnhancer getBeanEnhancer() {
        return beanEnhancer;
    }

    public void setBeanEnhancer(final BeanEnhancer beanEnhancer) {
        this.beanEnhancer = beanEnhancer;
    }

    // -----------------------------------------------------
    //                             Annotation Reader Factory
    //                             -------------------------
    public void setAnnotationReaderFactory(org.seasar.dao.AnnotationReaderFactory annotationReaderFactory) {
        this.annotationReaderFactory = annotationReaderFactory;
    }

    // -----------------------------------------------------
    //                                  Version After 1.0.47
    //                                  --------------------
    public ColumnNaming getColumnNaming() {
        return columnNaming;
    }

    public void setColumnNaming(final ColumnNaming columnNaming) {
        this.columnNaming = columnNaming;
    }

    public PropertyTypeFactoryBuilder getPropertyTypeFactoryBuilder() {
        return propertyTypeFactoryBuilder;
    }

    public void setPropertyTypeFactoryBuilder(final PropertyTypeFactoryBuilder propertyTypeFactoryBuilder) {
        this.propertyTypeFactoryBuilder = propertyTypeFactoryBuilder;
    }

    public RelationPropertyTypeFactoryBuilder getRelationPropertyTypeFactoryBuilder() {
        return relationPropertyTypeFactoryBuilder;
    }

    public void setRelationPropertyTypeFactoryBuilder(final RelationPropertyTypeFactoryBuilder relationPropertyTypeFactoryBuilder) {
        this.relationPropertyTypeFactoryBuilder = relationPropertyTypeFactoryBuilder;
    }

    public TableNaming getTableNaming() {
        return tableNaming;
    }

    public void setTableNaming(final TableNaming tableNaming) {
        this.tableNaming = tableNaming;
    }

    // -----------------------------------------------------
    //                                     DBFlute Extension
    //                                     -----------------
    public ${glBehaviorSelectorInterfaceName} getBehaviorSelector() {
        return _behaviorSelector;
    }

    public void setBehaviorSelector(final ${glBehaviorSelectorInterfaceName} behaviorSelector) {
        this._behaviorSelector = behaviorSelector;
    }
    
    public boolean isInternalDebug() {
        return _internalDebug;
    }

    public void setInternalDebug(final boolean internalDebug) {
        this._internalDebug = internalDebug;
    }
}
