
using System;
using System.Data;
using System.Data.OleDb;
using System.Data.SqlClient;
using Seasar.Framework.Util;
using Seasar.Extension.ADO;
using Seasar.Extension.ADO.Types;

using ${glPackageBaseCommonJavaLike};
using ${glPackageBaseCommonS2Dao};

namespace ${glPackageBaseCommonS2DaoInternalSqlHandler} {

    public class ${glInternalProcedureHandler} : ${glInternalBasicSelectHandler} {

        // ===============================================================================
        //                                                                       Attribute
        //                                                                       =========
        protected readonly ProcedureMetaData _procedureMetaData;
		
        // ===============================================================================
        //                                                                     Constructor
        //                                                                     ===========
        public ${glInternalProcedureHandler}(IDataSource dataSource, String sql,
                IDataReaderHandler dataReaderHandler, ICommandFactory commandFactory,
                IDataReaderFactory dataReaderFactory, ProcedureMetaData procedureMetaData)
                : base(dataSource, sql, dataReaderHandler, commandFactory, dataReaderFactory) {
            this._procedureMetaData = procedureMetaData;
        }

        // ===============================================================================
        //                                                                         Execute
        //                                                                         =======
        protected override Object Execute(IDbConnection conn, Object[] args, Type[] argTypes) {
            Object dto = GetArgumentDto(args);
            LogSql(args, argTypes);
            IDbCommand dbCommand = null;
            try {
                dbCommand = PrepareCallableStatement(conn, this.Sql);
                Object returnValue = null;
                int additionalParamCount = 0;
                if (_procedureMetaData.HasReturnParameterType) {
                    Type returnType = _procedureMetaData.ReturnParameterType;
                    String returnParamName = BindReturnValues(dbCommand, "RetValue", GetDbValueType(returnType));
                    BindParamters(dbCommand);
                    CommandFactory.ExecuteNonQuery(this.DataSource, dbCommand);
                    IDbDataParameter param = (IDbDataParameter)dbCommand.Parameters[returnParamName];
                    returnValue = param.Value;
                    additionalParamCount = 1;
                } else {
                    BindParamters(dbCommand);
                    CommandFactory.ExecuteNonQuery(this.DataSource, dbCommand);
                }
                return HandleOutParameters(dbCommand, dto, returnValue, additionalParamCount);
            // } catch (Exception e) {
            //     handleSQLException(e, cs);
            //     return null;// Unreachable!
            } finally {
                try {
                    Close(dbCommand);
                } finally {
                    Close(conn);
                }
            }
        }

        protected Object GetArgumentDto(Object[] args) {
            if (args.Length == 0) {
                return null;
            }
            if (args.Length == 1) {
                if (args[0] == null) {
                    throw new IllegalArgumentException("args[0] should not be null!");
                }
                return args[0];
            }
            throw new IllegalArgumentException("args");
        }

        protected override String GetCompleteSql(Object[] args) {// for Procedure Call
            String sql = this.Sql;
            Object dto = GetArgumentDto(args);
            if (args == null || dto == null) {
                return sql;
            }
            StringBuilder sb = new StringBuilder(100);
            int pos = 0;
            int pos2 = 0;
            int size = _procedureMetaData.ParameterTypeSize;
            for (int i = 0; i < size; i++) {
                ProcedureParameterType ppt = _procedureMetaData.GetParameterType(i);
                if ((pos2 = sql.IndexOf('?', pos)) < 0) {
                    break;
                }
                sb.append(sql.Substring(pos, pos2));
                pos = pos2 + 1;
                if (ppt.IsInType) {
                    sb.append(GetBindVariableText(ppt.GetValue(dto)));
                } else {
                    sb.append(sql.Substring(pos2, pos));
                }
            }
            sb.append(sql.Substring(pos));
            return sb.toString();
        }

        protected IDbCommand PrepareCallableStatement(IDbConnection conn, String sql) {
            if (this.Sql == null) { throw new IllegalStateException("The SQL should not be null!"); }
            IDbCommand dbCommand = CommandFactory.CreateCommand(conn, sql);
            dbCommand.CommandType = CommandType.StoredProcedure;
            return dbCommand;
        }

        protected void BindParamters(IDbCommand command) {
            int size = _procedureMetaData.ParameterTypeSize;
            for (int i = 0; i < size; i++) {
                ProcedureParameterType ppt = _procedureMetaData.GetParameterType(i);
                String parameterName = ppt.ParameterName;
                BindVariableType vt = DataProviderUtil.GetBindVariableType(command);
                switch (vt) {
                    case BindVariableType.QuestionWithParam:
                        parameterName = "?" + parameterName;
                        break;
                    case BindVariableType.ColonWithParam:
                        if ("OracleCommand".Equals(command.GetType().Name)) {
                            parameterName = string.Empty + parameterName;
                        } else {
                            parameterName = ":" + parameterName;
                        }
                        break;
                    default:
                        parameterName = "@" + parameterName;
                        break;
                }

                DbType dbType = GetDbValueType(ppt.ParameterPropertyType);
                IDbDataParameter parameter = command.CreateParameter();
                parameter.ParameterName = parameterName;
                parameter.Direction = ppt.ParameterDirectionType;
                parameter.Value = GetDbValueType(ppt.ParameterPropertyType);
                parameter.DbType = dbType;
                parameter.Size = 4096;
                if ("OleDbCommand".Equals(command.GetType().Name) && dbType == DbType.String) {
                    OleDbParameter oleDbParam = parameter as OleDbParameter;
                    oleDbParam.OleDbType = OleDbType.VarChar;
                } else if ("SqlCommand".Equals(command.GetType().Name) && dbType == DbType.String) {
                    SqlParameter sqlDbParam = parameter as SqlParameter;
                    sqlDbParam.SqlDbType = SqlDbType.VarChar;
                }
                command.Parameters.Add(parameter);
            }
        }

        protected String BindReturnValues(IDbCommand command, string parameterName, DbType dbType) {
            IDbDataParameter parameter = command.CreateParameter();
            parameter.ParameterName = parameterName;
            parameter.Direction = ParameterDirection.ReturnValue;
            parameter.DbType = dbType;
            parameter.Size = 4096;
            if ("OleDbCommand".Equals(command.GetType().Name) && dbType == DbType.String) {
                OleDbParameter oleDbParam = parameter as OleDbParameter;
                oleDbParam.OleDbType = OleDbType.VarChar;
            } else if ("SqlDbCommand".Equals(command.GetType().Name) && dbType == DbType.String) {
                SqlParameter sqlDbParam = parameter as SqlParameter;
                sqlDbParam.SqlDbType = SqlDbType.VarChar;
            }
            command.Parameters.Add(parameter);
            return parameter.ParameterName;
        }

        protected DbType GetDbValueType(Type type) {
            if (type == typeof(Byte) || type.FullName == "System.Byte&")
                return DbType.Byte;
            if (type == typeof(SByte) || type.FullName == "System.SByte&")
                return DbType.SByte;
            if (type == typeof(Int16) || type.FullName == "System.Int16&")
                return DbType.Int16;
            if (type == typeof(Int32) || type.FullName == "System.Int32&")
                return DbType.Int32;
            if (type == typeof(Int64) || type.FullName == "System.Int64&")
                return DbType.Int64;
            if (type == typeof(Single) || type.FullName == "System.Single&")
                return DbType.Single;
            if (type == typeof(Double) || type.FullName == "System.Double&")
                return DbType.Double;
            if (type == typeof(Decimal) || type.FullName == "System.Decimal&")
                return DbType.Decimal;
            if (type == typeof(DateTime) || type.FullName == "System.DateTime&")
                return DbType.DateTime;
            if (type == ValueTypes.BYTE_ARRAY_TYPE)
                return DbType.Binary;
            if (type == typeof(String) || type.FullName == "System.String&")
                return DbType.String;
            if (type == typeof(Boolean) || type.FullName == "System.Boolean&")
                return DbType.Boolean;
            if (type == typeof(Guid) || type.FullName == "System.Guid&")
                return DbType.Guid;
            else
                return DbType.Object;
        }

        protected Object HandleOutParameters(IDbCommand dbCommand, Object dto, Object returnValue, int additionalParamCount) {
            if (dto == null) {
                return null;
            }
            int size = _procedureMetaData.ParameterTypeSize;
            for (int i = 0; i < size; i++) {
                ProcedureParameterType ppt = _procedureMetaData.GetParameterType(i);
                if (ppt.IsOutType) {
                    Object value = ((IDataParameter) dbCommand.Parameters[i+additionalParamCount]).Value;
                    // Not support yet
                    if (value is IDataReader) {
                        IDataReader reader = (IDataReader) value;
                        throw new NotImplementedException("The result set of procedure is not implemented: " + reader);
                    //     IDataReaderHandler handler = CreateOutParameterResultSetHandler(ppt, reader);
                    //     try {
                    //         value = handler.Handle(reader);
                    //     } finally {
                    //         if (reader != null) {
                    //             reader.Close();
                    //         }
                    //     }
                    }
                    ppt.SetValue(dto, value);
                } else if (ppt.IsReturnType) {
                    ppt.SetValue(dto, returnValue);
                }
            }
            return dto;
        }

        protected IDataReaderHandler CreateOutParameterResultSetHandler(ProcedureParameterType ppt, IDataReader reader) {
            // return new InternalMapListResultSetHandler();
            return null;
        }
    }
}