#set ($myClassName = "${glPagingResultBeanName}")

using System;

using ${glPackageBaseCommonJavaLike};
using ${glPackageBaseCommonCBeanPagenaviGroup};
using ${glPackageBaseCommonCBeanPagenaviRange};

namespace ${glPackageBaseCommonCBean} {

    /// <summary>
    /// The paging-result-bean of ${myClassName}.
    /// Author: ${database.ClassAuthor}
    /// </summary>
    [System.Serializable]
    public class ${myClassName}<ENTITY> : ${glListResultBeanName}<ENTITY> {

        // =====================================================================================
        //                                                                             Attribute
        //                                                                             =========
        #region Attribute

        protected int _pageSize;
        protected int _currentPageNumber;
        protected ${glPageGroupBeanName} _pageGroupBean;
        protected ${glPageGroupOptionName} _pageGroupOption;
        protected ${glPageRangeBeanName} _pageRangeBean;
        protected ${glPageRangeOptionName} _pageRangeOption;

        #endregion

        // =====================================================================================
        //                                                                           Constructor
        //                                                                           ===========
        #region Constructor

        public ${myClassName}() {
        }

        #endregion

        // =====================================================================================
        //                                                                              Property
        //                                                                              ========
        #region Property

        public int PageSize {
            get { return _pageSize; }
            set { _pageSize = value; }
        }

        public int CurrentPageNumber {
            get { return _currentPageNumber; }
            set { _currentPageNumber = value; }
        }

        public int AllPageCount {
            get { return CalculateAllPageCount(_allRecordCount, _pageSize); }
        }

        public int CurrentStartRecordNumber {
            get { return CalculateCurrentStartRecordNumber(_currentPageNumber, _pageSize); }
        }

        public int CurrentEndRecordNumber {
            get { return CalculateCurrentEndRecordNumber(_currentPageNumber, _pageSize); }
        }

        public ${glPageRangeOptionName} PageRangeOption {
            set { _pageRangeOption = value; }
        }

        public ${glPageGroupOptionName} PageGroupOption {
            set { _pageGroupOption = value; }
        }

        #endregion

        // ===============================================================================
        //                                                                Page Group/Range
        //                                                                ================
        // -------------------------------------------------
        //                                        Page Group
        //                                        ----------
        public ${glPageGroupBeanName} PageGroup() {
            AssertPageGroupValid();
            if (_pageGroupBean == null) {
                _pageGroupBean = new ${glPageGroupBeanName}();
            }
            _pageGroupBean.PageGroupOption = _pageGroupOption;
            _pageGroupBean.CurrentPageNumber = CurrentPageNumber;
            _pageGroupBean.AllPageCount = AllPageCount;
            return _pageGroupBean;
        }
    
        protected void AssertPageGroupValid() {
            if (_pageGroupOption == null) {
                String msg = "The pageGroupOption should not be null. Please invoke setPageGroupOption().";
                throw new IllegalStateException(msg);
            }
            if (_pageGroupOption.PageGroupSize == 0) {
                String msg = "The pageGroupSize should be greater than 1. But the value is zero.";
                msg = msg + " pageGroupSize=" + _pageGroupOption.PageGroupSize;
                throw new IllegalStateException(msg);
            }
            if (_pageGroupOption.PageGroupSize == 1) {
                String msg = "The pageGroupSize should be greater than 1. But the value is one.";
                msg = msg + " pageGroupSize=" + _pageGroupOption.PageGroupSize;
                throw new IllegalStateException(msg);
            }
        }

        // -------------------------------------------------
        //                                        Page Range
        //                                        ----------
        public ${glPageRangeBeanName} PageRange() {
            AssertPageRangeValid();
            if (_pageRangeBean == null) {
                _pageRangeBean = new ${glPageRangeBeanName}();
            }
            _pageRangeBean.PageRangeOption = _pageRangeOption;
            _pageRangeBean.CurrentPageNumber = CurrentPageNumber;
            _pageRangeBean.AllPageCount = AllPageCount;
            return _pageRangeBean;
        }
    
        protected void AssertPageRangeValid() {
            if (_pageRangeOption == null) {
                String msg = "The pageRangeOption should not be null. Please invoke setPageRangeOption().";
                throw new IllegalStateException(msg);
            }
            int pageRangeSize = _pageRangeOption.PageRangeSize;
            if (pageRangeSize == 0) {
                String msg = "The pageRangeSize should be greater than 1. But the value is zero.";
                throw new IllegalStateException(msg);
            }
        }

        // =====================================================================================
        //                                                                             Calculate
        //                                                                             =========
        // -------------------------------------------
        //                                        Page
        //                                        ----
        protected int CalculateAllPageCount(int allRecordCount, int pageSize) {
            if (allRecordCount == 0) {
                return 1;
            }
            int pageCountBase = (allRecordCount / pageSize);
            if (allRecordCount % pageSize > 0) {
                pageCountBase++;
            }
            return pageCountBase;
        }

        protected int CalculateCurrentStartRecordNumber(int currentPageNumber, int pageSize) {
            return ((currentPageNumber - 1) * pageSize) + 1;
        }

        protected int CalculateCurrentEndRecordNumber(int currentPageNumber, int pageSize) {
            return CalculateCurrentStartRecordNumber(currentPageNumber, pageSize) + _selectedList.Count - 1;
        }

        public bool IsExistPrePage() {
            return (_allRecordCount > 0 && _currentPageNumber > 1);
        }

        public bool IsExistNextPage() {
            return (_allRecordCount > 0 && _currentPageNumber < this.AllPageCount);
        }

        // =====================================================================================
        //                                                                 Basic-Override Method
        //                                                                 =====================
        /// <summary>
        /// This method overrides the method that is declared at super.
        /// </summary>
        /// <returns>View-string of all-columns value.</returns>
        public override String ToString() {
            StringBuilder sb = new StringBuilder();

            sb.append(this.CurrentPageNumber).append("/").append(this.AllPageCount);
            sb.append(" ").append(this.AllRecordCount);
            sb.append(" listSize=").append((this.SelectedList != null ? ""+this.SelectedList.Count : null));
            sb.append(" pageSize=").append(this.PageSize);
            sb.append(" page:{").append(IsExistPrePage()).append("/").append(IsExistNextPage()).append("}");
            sb.append(" groupSize=").append(_pageGroupBean);
            sb.append(" rangeSize=").append(_pageRangeBean);

            return sb.toString();
        }
    }
}
