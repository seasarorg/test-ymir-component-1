
using System;
using Seasar.Quill;

using ${glPackageBaseCommon};
using ${glPackageBaseCommonBhv};
using ${glPackageBaseCommonDBMeta};
using ${glPackageBaseCommonJavaLike};
using ${glPackageBaseCommonUtil};

namespace ${glPackageBaseCommon} {

    public class ${glCacheBehaviorSelectorName} : ${glBehaviorSelectorInterfaceName} {

        // ===================================================================================
        //                                                                          Initialize
        //                                                                          ==========
        // public void InitializeConditionBeanMetaData() {
        //     Map<String, ${glDBMetaInterfaceName}> dbmetaMap = ${glDBMetaInstanceHandlerName}.getDBMetaMap();
        //     Collection<${glDBMetaInterfaceName}> dbmetas = dbmetaMap.values();
        //     DateTime before = 0;
        //     if (_log.IsDebugEnabled) {
        //         before = DateTime.Now;
        //         _log.Debug("/= = = = = = = = = = = = = = = = = initializeConditionBeanMetaData()");
        //     }
        //     for (${glDBMetaInterfaceName} dbmeta : dbmetas) {
        //         ${glBehaviorReadableInterfaceName} bhv = byName(dbmeta.getTableDbName());
        //         ${glDaoReadableInterfaceName} dao = bhv.getDaoReadable();
        //         if (_log.IsDebugEnabled) {
        //             _log.Debug("[" + dbmeta.TableDbName + "]");
        //         }
        //         dao.InitializeDaoMetaData("selectList");
        //     }
        //     if (_log.IsDebugEnabled) {
        //         DateTime after = DateTime.Now;
        //         _log.Debug("= = = = = = = = = =/ [" + ${glTraceViewUtilName}.convertToPerformanceView(after - before) + "]");
        //     }
        // }
    
        // ===============================================================================
        //                                                                  Implementation
        //                                                                  ==============
        public virtual BEHAVIOR Select<BEHAVIOR>() where BEHAVIOR : ${glBehaviorReadableInterfaceName} {
            Type behaviorType = typeof(BEHAVIOR);
            QuillComponent component = QuillInjector.GetInstance().Container.GetComponent(behaviorType);
            BEHAVIOR bhv = (BEHAVIOR)component.GetComponentObject(behaviorType);
            if (bhv.IsInitialized) {
                return bhv;
            }
            QuillInjector.GetInstance().Inject(bhv);
            return bhv;
        }

        public virtual ${glBehaviorReadableInterfaceName} ByName(String tableFlexibleName) {
            AssertStringNotNullAndNotTrimmedEmpty("tableFlexibleName", tableFlexibleName);
            ${glDBMetaInterfaceName} dbmeta = ${glDBMetaInstanceHandlerName}.FindDBMeta(tableFlexibleName);
            return InternalSelect<${glBehaviorReadableInterfaceName}>(GetBehaviorType(dbmeta));
        }

        [System.Obsolete("Please use Select<BEHAVIOR>()")]
        public virtual BEHAVIOR Select<BEHAVIOR>(Type behaviorType) where BEHAVIOR : ${glBehaviorReadableInterfaceName} {
            QuillComponent component = QuillInjector.GetInstance().Container.GetComponent(behaviorType);
            BEHAVIOR bhv = (BEHAVIOR)component.GetComponentObject(behaviorType);
            if (bhv.IsInitialized) {
                return bhv;
            }
            QuillInjector.GetInstance().Inject(bhv);
            return bhv;
        }

        protected virtual BEHAVIOR InternalSelect<BEHAVIOR>(Type behaviorType) where BEHAVIOR : ${glBehaviorReadableInterfaceName} {
            QuillComponent component = QuillInjector.GetInstance().Container.GetComponent(behaviorType);
            BEHAVIOR bhv = (BEHAVIOR)component.GetComponentObject(behaviorType);
            if (bhv.IsInitialized) {
                return bhv;
            }
            QuillInjector.GetInstance().Inject(bhv);
            return bhv;
        }

        // ===============================================================================
        //                                                                   Assist Helper
        //                                                                   =============
        protected static Type GetBehaviorType(${glDBMetaInterfaceName} dbmeta) {
            String behaviorTypeName = dbmeta.BehaviorTypeName;
            if (behaviorTypeName == null) {
                String msg = "The dbmeta.BehaviorTypeName should not return null: dbmeta=" + dbmeta;
                throw new SystemException(msg);
            }
            Seasar.Framework.Xml.S2Section config = Seasar.Framework.Xml.S2SectionHandler.GetS2Section();
            return ForName(behaviorTypeName, config.Assemblys);
        }

        protected static Type ForName(string className, System.Collections.IList assemblys) {
            Type type = Type.GetType(className);
            if(type != null) return type;
            foreach(String assemblyName in assemblys) {
                System.Reflection.Assembly assembly = System.Reflection.Assembly.Load(assemblyName);
                if (assembly == null) {
                    String msg = "The assemblyName was not found: " + assemblyName + " assemblys=";
                    msg = msg + Seasar.Framework.Util.ToStringUtil.ToString(assemblys);
                    throw new SystemException(msg);
                }
                type = assembly.GetType(className);
                if(type != null) return type;
            }
            return type;
        }

        // ===============================================================================
        //                                                                          Helper
        //                                                                          ======
        // -------------------------------------------------
        //                                     Assert Object
        //                                     -------------
        protected static void AssertObjectNotNull(String variableName, Object value) {
            if (variableName == null) {
                String msg = "The value should not be null: variableName=" + variableName + " value=" + value;
                throw new SystemException(msg);
            }
            if (value == null) {
                String msg = "The value should not be null: variableName=" + variableName;
                throw new SystemException(msg);
            }
        }

        // -------------------------------------------------
        //                                     Assert String
        //                                     -------------
        protected static void AssertStringNotNullAndNotTrimmedEmpty(String variableName, String value) {
            AssertObjectNotNull("variableName", variableName);
            AssertObjectNotNull(variableName, value);
            if (value.Trim().Length ==0) {
                String msg = "The value should not be empty: variableName=" + variableName + " value=" + value;
                throw new SystemException(msg);
            }
        }
    }
}
