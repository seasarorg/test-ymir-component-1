
using System;
using System.Reflection;
using System.Text;

using ${glPackageBaseCommonCBean};
using ${glPackageBaseCommonCBeanOutsidesql};

namespace ${glPackageBaseCommonS2Dao} {

    /**
     * Fetch page result set factory.
     * 
     * @author ${database.ClassAuthor}
     */
    public class ${glFetchNarrowingResultSetFactory} : Seasar.Extension.ADO.IDataReaderFactory {

        /**
         * Constructor.
         */
        public ${glFetchNarrowingResultSetFactory}() {
        }

        /**
         * Create result set.
         * 
         * @param ps Prepared statement.
         * @return Result set. (NotNull)
         */
        public System.Data.IDataReader CreateDataReader(Seasar.Extension.ADO.IDataSource dataSource, System.Data.IDbCommand cmd) {
            System.Data.IDataReader dataReader = Seasar.Framework.Util.CommandUtil.ExecuteReader(dataSource, cmd);

            if (!${glFetchNarrowingBeanContextName}.IsExistFetchNarrowingBeanOnThread()) {
                return dataReader;// If the first argument is not condition-bean...
            }
            ${glFetchNarrowingBeanInterfaceName} cb = ${glFetchNarrowingBeanContextName}.GetFetchNarrowingBeanOnThread();
            if (!IsUseFetchNarrowingResultSetWrapper(cb)) {
                return dataReader;
            }
            ${glFetchNarrowingResultSetWrapper} wrapper = null;
            if (${glOutsideSqlContextName}.IsExistOutsideSqlContextOnThread()) {
                ${glOutsideSqlContextName} outsideSqlContext = ${glOutsideSqlContextName}.GetOutsideSqlContextOnThread();
                wrapper = new ${glFetchNarrowingResultSetWrapper}(dataReader, cb, outsideSqlContext.IsOffsetByCursorForcedly, outsideSqlContext.IsLimitByCursorForcedly);
            } else {
                wrapper = new ${glFetchNarrowingResultSetWrapper}(dataReader, cb, false, false);
            }
            return wrapper;
        }

        protected bool IsUseFetchNarrowingResultSetWrapper(${glFetchNarrowingBeanInterfaceName} cb) {
            if (cb.SafetyMaxResultSize > 0) {
                return true;
            }
            if (!cb.IsFetchNarrowingEffective) {
                return false;// It is not necessary to control.
            }
            if (${glOutsideSqlContextName}.IsExistOutsideSqlContextOnThread()) {
                ${glOutsideSqlContextName} outsideSqlContext = ${glOutsideSqlContextName}.GetOutsideSqlContextOnThread();
                if (outsideSqlContext.IsOffsetByCursorForcedly || outsideSqlContext.IsLimitByCursorForcedly) {
                    return true;
                }
            }
            if (cb.IsFetchNarrowingSkipStartIndexEffective || cb.IsFetchNarrowingLoopCountEffective) {
                return true;
            }
            return false;
        }
    }
}
