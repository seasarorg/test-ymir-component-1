#set ($myClassName = "${glBehaviorReadableAbstractName}")

using System;
using System.Collections.Generic;

using ${glPackageBaseCommon};
using ${glPackageBaseCommonCBean};
using ${glPackageBaseCommonCBeanOutsidesql};
using ${glPackageBaseCommonCBeanOutsidesqlExecutor};
using ${glPackageBaseCommonDBMeta};

namespace ${glPackageBaseCommonBhv} {

    public abstract class $myClassName : ${glBehaviorReadableInterfaceName} {

        // ===============================================================================
        //                                                                       Attribute
        //                                                                       =========
        protected ${glDaoSelectorInterfaceName} _daoSelector;
        protected ${glBehaviorSelectorInterfaceName} _behaviorSelector;

        // ===============================================================================
        //                                                                Initialized Mark
        //                                                                ================
        public abstract bool IsInitialized { get; }

        // ===============================================================================
        //                                                                      Table Name
        //                                                                      ==========
        public abstract String TableDbName { get; }

        // ===============================================================================
        //                                                                          DBMeta
        //                                                                          ======
        public abstract ${glDBMetaInterfaceName} DBMeta { get; }

        // ===============================================================================
        //                                                                    New Instance
        //                                                                    ============
        public abstract ${glEntityInterfaceName} NewEntity();
        public abstract ${glConditionBeanInterfaceName} NewConditionBean();

        // ===============================================================================
        //                                                                   Basic Get All
        //                                                                   =============
        public int GetCountAll() {
            return this.CallGetCountAll();
        }

        // ===============================================================================
        //                                                                      Count Read
        //                                                                      ==========
        public virtual int ReadCount(${glConditionBeanInterfaceName} cb) {
            AssertConditionBeanNotNull(cb);
            return this.CallReadCount(cb);
        }

        // ===============================================================================
        //                                                                     Entity Read
        //                                                                     ===========
        public virtual ${glEntityInterfaceName} ReadEntity(${glConditionBeanInterfaceName} cb) {
            AssertConditionBeanNotNull(cb);
            IList<${glEntityInterfaceName}> ls = this.CallReadList(cb);
            if (ls.Count == 0) {
                return null;
            }
            AssertEntitySelectedAsOne(ls, cb);
            return (${glEntityInterfaceName})ls[0];
        }

        public virtual ${glEntityInterfaceName} ReadEntityWithDeletedCheck(${glConditionBeanInterfaceName} cb) {
            AssertConditionBeanNotNull(cb);
            IList<${glEntityInterfaceName}> ls = this.CallReadList(cb);
            AssertEntityNotDeleted(ls, cb);
            AssertEntitySelectedAsOne(ls, cb);
            return (${glEntityInterfaceName})ls[0];
        }

        // ===============================================================================
        //                                                                       List Read
        //                                                                       =========
        public virtual ${glListResultBeanName}<${glEntityInterfaceName}> ReadList(${glConditionBeanInterfaceName} cb) {
            AssertConditionBeanNotNull(cb);
            return new ${glResultBeanBuilderName}<${glEntityInterfaceName}>(TableDbName).BuildListResultBean(cb, this.CallReadList(cb));
        }

        public virtual ${glPagingResultBeanName}<${glEntityInterfaceName}> ReadPage(${glConditionBeanInterfaceName} cb) {
            AssertConditionBeanNotNull(cb);
            ${glPagingInvokerName}<${glEntityInterfaceName}> invoker = new ${glPagingInvokerName}<${glEntityInterfaceName}>(TableDbName);
            return invoker.InvokePaging(new InternalReadPagingHandler(this, cb));
        }

        private class InternalReadPagingHandler : ${glPagingHandlerName}<${glEntityInterfaceName}> {
            protected ${glBehaviorReadableInterfaceName} _bhv;
            protected ${glConditionBeanInterfaceName} _cb;
            public InternalReadPagingHandler(${glBehaviorReadableInterfaceName} bhv, ${glConditionBeanInterfaceName} cb) {
                _bhv = bhv;
                _cb = cb;
            }
            public ${glPagingBeanInterfaceName} PagingBean { get { return _cb; } }
            public int Count() { return _bhv.ReadCount(_cb); }
            public IList<${glEntityInterfaceName}> Paging() { return _bhv.ReadList(_cb); }
        }

        // -------------------------------------------------
        //                                     Assert Result
        //                                     -------------
        protected void AssertEntityNotDeleted(${glEntityInterfaceName} entity, Object searchKey4Log) {
            if (entity == null) {
                ${glConditionBeanContextName}.ThrowEntityAlreadyDeletedException(searchKey4Log, TableDbName);
            }
        }

        protected void AssertEntityNotDeleted<ENTITY_TYPE>(IList<ENTITY_TYPE> ls, Object searchKey4Log) where ENTITY_TYPE : ${glEntityInterfaceName} {
            if (ls == null || ls.Count == 0) {
                ${glConditionBeanContextName}.ThrowEntityAlreadyDeletedException(searchKey4Log, TableDbName);
            }
        }

        protected void AssertEntitySelectedAsOne<ENTITY_TYPE>(IList<ENTITY_TYPE> ls, Object searchKey4Log) where ENTITY_TYPE : ${glEntityInterfaceName} {
            if (ls == null || ls.Count == 0) {
				${glConditionBeanContextName}.ThrowEntityAlreadyDeletedException(searchKey4Log, TableDbName);
            }
            if (ls.Count != 1) {
			    ${glConditionBeanContextName}.ThrowEntityDuplicatedException("" + ls.Count, searchKey4Log, null, TableDbName);
            }
        }

        // ===============================================================================
        //                                                                  Various Select
        //                                                                  ==============
        public virtual ${glOutsideSqlBasicExecutorName} OutsideSql() {
            AssertDaoSelectorNotNull("OutsideSql");
            ${glOutsideSqlDaoName} outsideSqlDao = _daoSelector.Select<${glOutsideSqlDaoName}>();
            return new ${glOutsideSqlBasicExecutorName}(outsideSqlDao, this.TableDbName);
        }

        private void AssertDaoSelectorNotNull(String methodName) {
            if (_daoSelector == null) {
                String msg = "Look! Read the message below." + GetLineSeparator();
                msg = msg + "/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *" + GetLineSeparator();
                msg = msg + "Not found the selector of dao as behavior's attributed!" + GetLineSeparator();
                msg = msg + GetLineSeparator();
                msg = msg + "[Advice]" + GetLineSeparator();
                msg = msg + "Please confirm the definition of the selector at your 'dbflute.dicon'." + GetLineSeparator();
                msg = msg + "It is precondition that '" + methodName + "()' needs the selector instance." + GetLineSeparator();
                msg = msg + GetLineSeparator();
                msg = msg + "[Your Behavior's Attributes]" + GetLineSeparator();
                msg = msg + "  _behaviorSelector  : " + _behaviorSelector + GetLineSeparator();
                msg = msg + "  _daoSelector       : " + _daoSelector + GetLineSeparator();
                msg = msg + "* * * * * * * * * */" + GetLineSeparator();
                throw new SystemException(msg);
            }
        }

        // ===============================================================================
        //                                                                 Delegate Method
        //                                                                 ===============
        protected int CallGetCountAll() { return DoCallGetCountAll(); }
        protected abstract int DoCallGetCountAll();
        protected IList<${glEntityInterfaceName}> CallGetListAll() { return DoCallGetListAll(); }
        protected abstract IList<${glEntityInterfaceName}> DoCallGetListAll();
        protected int CallReadCount(${glConditionBeanInterfaceName} cb) { return DoCallReadCount(cb); }
        protected abstract int DoCallReadCount(${glConditionBeanInterfaceName} cb);
        protected IList<${glEntityInterfaceName}> CallReadList(${glConditionBeanInterfaceName} cb) { return DoCallReadList(cb); }
        protected abstract IList<${glEntityInterfaceName}> DoCallReadList(${glConditionBeanInterfaceName} cb);

        // ===============================================================================
        //                                                                          Helper
        //                                                                          ======
        #region Helper
        protected virtual String GetLineSeparator() {
            return Environment.NewLine;
        }
        // -------------------------------------------------
        //                                     Assert Object
        //                                     -------------
        protected virtual void AssertObjectNotNull(String variableName, Object arg) {
            if (variableName == null) {
                String msg = "Argument[variableName] should not be null.";
                throw new ArgumentNullException(msg);
            }
            if (arg == null) {
                String msg = "Argument[" + variableName + "] should not be null.";
                throw new ArgumentNullException(msg);
            }
        }

        protected virtual void AssertEntityNotNull(${glEntityInterfaceName} entity) {
            AssertObjectNotNull("entity", entity);
        }

        protected virtual void AssertConditionBeanNotNull(${glPackageBaseCommonCBean}.${glConditionBeanInterfaceName} cb) {
            AssertObjectNotNull("cb", cb);
        }

        protected virtual void AssertEntityNotNullAndHasPrimaryKeyValue(${glEntityInterfaceName} entity) {
            AssertEntityNotNull(entity);
            if (!entity.HasPrimaryKeyValue) {
                String msg = "The entity must should primary-key: entity=" + entity;
                throw new ArgumentOutOfRangeException(msg + entity);
            }
        }

        // -------------------------------------------------
        //                                     Assert String
        //                                     -------------
        protected virtual void AssertStringNotNullAndNotTrimmedEmpty(String variableName, String value) {
            if (variableName == null) {
                String msg = "Variable[variableName] should not be null.";
                throw new ArgumentNullException(msg);
            }
            if (value == null) {
                String msg = "Variable[" + variableName + "] should not be null.";
                throw new ArgumentNullException(msg);
            }
            if (value.Trim().Length == 0) {
                String msg = "Variable[" + variableName + "] should not be empty: [" + value + "]";
                throw new ArgumentOutOfRangeException(msg);
            }
        }

        // -------------------------------------------------
        //                                       Assert List
        //                                       -----------
        protected virtual void AssertListNotNullAndEmpty<ELEMENT_TYPE>(String variableName, IList<ELEMENT_TYPE> ls) {
            AssertObjectNotNull(variableName, ls);
            if (!(ls.Count == 0)) {
                String msg = "The list[" + variableName + "] should be empty: ls=" + ls.ToString();
                throw new ArgumentOutOfRangeException(msg);
            }
        }

        protected virtual void AssertListNotNullAndNotEmpty<ELEMENT_TYPE>(String variableName, IList<ELEMENT_TYPE> ls) {
            AssertObjectNotNull(variableName, ls);
            if (ls.Count == 0) {
                String msg = "The list[" + variableName + "] should not be empty: ls=" + ls.ToString();
                throw new ArgumentOutOfRangeException(msg);
            }
        }

        protected virtual void AssertListNotNullAndHasOnlyOne<ELEMENT_TYPE>(String variableName, IList<ELEMENT_TYPE> ls) {
            AssertObjectNotNull(variableName, ls);
            if (ls.Count != 1) {
                String msg = "The list[" + variableName + "] should contain only one object: ls=" + ls.ToString();
                throw new ArgumentOutOfRangeException(msg);
            }
        }
        #endregion

        // ===============================================================================
        //                                                                        Accessor
        //                                                                        ========
        #region Accessor
        /// <summary>
        ///  The property of dao selector.
        /// </summary>
        public ${glDaoSelectorInterfaceName} DaoSelector {
            get { return _daoSelector; }
            set { _daoSelector = value; }
        }

        /// <summary>
        ///  The property of behavior selector.
        /// </summary>
        public ${glBehaviorSelectorInterfaceName} BehaviorSelector {
            get { return _behaviorSelector; }
            set { _behaviorSelector = value; }
        }
        #endregion
    }
}