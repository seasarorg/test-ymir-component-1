
using System;
using System.Collections.Generic;
using System.Data;
using System.Reflection;

using Seasar.Extension.ADO;
using Seasar.Dao;
using Seasar.Dao.Impl;

using ${glPackageBaseCommonCBean};

namespace ${glPackageBaseCommonS2DaoInternalRsHandler} {

    public class ${glInternalBeanListMetaDataResultSetHandler} : ${glInternalAbstractBeanMetaDataResultSetHandler} {

        // ===============================================================================
        //                                                                     Constructor
        //                                                                     ===========
        public ${glInternalBeanListMetaDataResultSetHandler}(IBeanMetaData beanMetaData, IRowCreator rowCreator, IRelationRowCreator relationRowCreator)
            : base(beanMetaData, rowCreator, relationRowCreator) {
        }

        // ===============================================================================
        //                                                                          Handle
        //                                                                          ======
        public override Object Handle(IDataReader dataReader) {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            Handle(dataReader, list);
            return list;
        }

        protected void Handle(IDataReader dataReader, System.Collections.IList list) {
            System.Collections.IList columnNames = null;
            IColumnMetaData[] columns = null;
            IDictionary<String, IDictionary<String, IPropertyType>> relationPropertyCache = null;

            int relSize = BeanMetaData.RelationPropertyTypeSize;
            RelationRowCache relRowCache = new RelationRowCache(relSize);
            bool hasCB = HasConditionBean();
            bool emptyRelation = IsSelectedForeignInfoEmpty();

            while (dataReader.Read()) {
                // Lazy initialization because if the result is zero, the resources are unused.
                if (columnNames == null) {
                    columnNames = CreateColumnNames(dataReader.GetSchemaTable());
                }
                if (columns == null) {
                    columns = CreateColumnMetaData(columnNames);
                }
                if (relationPropertyCache == null) {
                    relationPropertyCache = CreateRelationPropertyCache(columnNames);
                }

                // Create row instance of base table by row property cache.
                Object row = CreateRow(dataReader, columns);

                if (hasCB && emptyRelation) {
                    PostCreateRow(row, BeanMetaData);
                    list.Add(row);
                    continue;
                }
                for (int i = 0; i < relSize; ++i) {
                    IRelationPropertyType rpt = BeanMetaData.GetRelationPropertyType(i);
                    if (rpt == null) {
                        continue;
                    }

                    // Do only selected foreign property for performance if condition-bean exists.
                    if (hasCB && !HasSelectedForeignInfo(BuildRelationNoSuffix(rpt))) {
                        continue;
                    }

                    Object relationRow = null;
                    System.Collections.Hashtable relKeyValues = new System.Collections.Hashtable();
                    RelationKey relKey = CreateRelationKey(dataReader, rpt, columnNames, relKeyValues);
                    if (relKey != null) {
                        relationRow = relRowCache.GetRelationRow(i, relKey);
                        if (relationRow == null) {
                            relationRow = CreateRelationRow(dataReader, rpt, columnNames, relKeyValues, relationPropertyCache);
                            if (relationRow != null) {
                                relRowCache.AddRelationRow(i, relKey, relationRow);
                                PostCreateRow(relationRow, rpt.BeanMetaData);
                            }
                        }
                    }
                    if (relationRow != null) {
                        PropertyInfo pi = rpt.PropertyInfo;
                        pi.SetValue(row, relationRow, null);
                    }
                }
                PostCreateRow(row, BeanMetaData);
                list.Add(row);
            }
        }

        protected RelationKey CreateRelationKey(IDataReader reader,
            IRelationPropertyType rpt, System.Collections.IList columnNames, System.Collections.Hashtable relKeyValues) {
            System.Collections.ArrayList keyList = new System.Collections.ArrayList();
            IBeanMetaData bmd = rpt.BeanMetaData;
            for (int i = 0; i < rpt.KeySize; ++i) {
                IValueType valueType = null;
                string columnName = rpt.GetMyKey(i);
                IPropertyType pt;
                if (columnNames.Contains(columnName)) {
                    pt = BeanMetaData.GetPropertyTypeByColumnName(columnName);
                    valueType = pt.ValueType;
                } else {
                    pt = bmd.GetPropertyTypeByColumnName(rpt.GetYourKey(i));
                    columnName = pt.ColumnName + BuildRelationNoSuffix(rpt);
                    if (columnNames.Contains(columnName))
                        valueType = pt.ValueType;
                    else
                        return null;
                }
                object value = valueType.GetValue(reader, columnName);
                if (value == null) return null;

                relKeyValues[columnName] = value;
                keyList.Add(value);
            }
            if (keyList.Count > 0) {
                object[] keys = keyList.ToArray();
                return new RelationKey(keys);
            }
            else return null;
        }
        
    
        // ===================================================================================
        //                                                                       Assist Helper
        //                                                                       =============
        protected bool HasConditionBean() {
            return ${glConditionBeanContextName}.IsExistConditionBeanOnThread();
        }

        protected bool IsSelectedForeignInfoEmpty() {
            if (!HasConditionBean()) {
                return true;
            }
            ${glConditionBeanInterfaceName} cb = ${glConditionBeanContextName}.GetConditionBeanOnThread();
            if (cb.SqlClause.isSelectedForeignInfoEmpty()) {
                return true;
            }
            return false;
        }

        // You should call HasConditionBean() before calling this!
        protected bool HasSelectedForeignInfo(String relationNoSuffix) {
            ${glConditionBeanInterfaceName} cb = ${glConditionBeanContextName}.GetConditionBeanOnThread();
            if (cb.SqlClause.hasSelectedForeignInfo(relationNoSuffix)) {
                return true;
            }
            return false;
        }

        protected String BuildRelationNoSuffix(IRelationPropertyType rpt) {
            return "_" + rpt.RelationNo;
        }
    }
}