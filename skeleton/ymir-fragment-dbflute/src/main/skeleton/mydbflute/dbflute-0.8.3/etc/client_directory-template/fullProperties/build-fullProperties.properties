# =======================================================================================
#                                                                                 for All
#                                                                                 =======

# -------------------------------------------------------------------
#  P R O J E C T
# -------------------------------------------------------------------
# @FirstProperty
# @Required
torque.project = exampledb

# -------------------------------------------------------------------
#  T A R G E T  D A T A B A S E
# -------------------------------------------------------------------
# This is the target database, only considered when generating
# the SQL for your Torque project. Your possible choices are:
#
#   oracle, mysql, postgresql, db2, mssql, derby, h2
# -------------------------------------------------------------------
# @FirstProperty
# @Required
torque.database = h2

# -------------------------------------------------------------------
#  T A R G E T  L A N G U A G E
# -------------------------------------------------------------------
# (Default 'java')
#   The target language. Your possible choices are:
#     java, csharp
# -------------------------------------------------------------------
# @FirstProperty
torque.targetLanguage = java

# -------------------------------------------------------------------
#  T A R G E T  C O N T A I N E R
# -------------------------------------------------------------------
# (Default 'seasar')
#   The target container. Your possible choices are:
#     seasar, spring
# -------------------------------------------------------------------
# @FirstProperty
torque.targetContainer = seasar

# -------------------------------------------------------------------
#  T E M P L A T E  E N C O D I N G
# -------------------------------------------------------------------
# (Default 'UTF-8')
#   The encoding of Velocity template file.
# -------------------------------------------------------------------
#torque.templateFileEncoding = UTF-8

# -------------------------------------------------------------------
#  S O U R C E  F I L E  E N C O D I N G
# -------------------------------------------------------------------
# (Default 'UTF-8')
#   The encoding of source file.
# -------------------------------------------------------------------
#torque.sourceFileEncoding = UTF-8

# -------------------------------------------------------------------
#  S C H E M A  X M L  E N C O D I N G
# -------------------------------------------------------------------
# (Default 'UTF-8')
#   The encoding of schema XML.
# -------------------------------------------------------------------
#torque.projectSchemaXMLEncoding = UTF-8



# ========================================================================================
#                                                                              for OM task
#                                                                              ===========

# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
#                                                            Basic
#                                                         _/_/_/_/
# /---------------------------------------------------------------------------
# [Output Directory]
#   java.dir: (Default Java:'../src/main/java' CSharp:'../source')
#     The base output directory.
#
#   *Java Project Style
#     If this value is '../src/main/java' and your project type is under maven,
#     you don't need to set up this property!
#
#     {app-project}
#         |
#         |-dbflute_[project]
#         |       |-build-[project].properties
#         |       |-...
#         |
#         |-src/main/java         // *Here!
#         |-src/main/resources
#         |-...
#
#   *CSharp Project Style
#     [app-solution]/dbflute_[project]/build-[project].properties
#     [app-solution]/mydbflute/dbflute-0.6.0
#     [app-solution]/source/[app-solution].sln
#     [app-solution]/source/[app-project(top-namespace)]/[part-namespace]/AllCommon
#     [app-solution]/source/[app-project(top-namespace)]/[part-namespace]/BsBhv
#     [app-solution]/source/[app-project(top-namespace)]/[part-namespace]/...
#     [app-solution]/source/[app-project(top-namespace)]/Resources/DBFlute.dicon
#     [app-solution]/source/[app-project(top-namespace)]/Resources/Ado.dicon
#
# @FirstProperty
#torque.java.dir = ../src/main/java
# ----------------/

# /---------------------------------------------------------------------------
# [Class Author]
#   classAuthor: (Default 'DBFlute(AutoGenerator)')
#     The value of the author tag in class javadoc.
#     All classes are target.
#
#torque.classAuthor = DBFlute(AutoGenerator)
# ----------------/

# /---------------------------------------------------------------------------
# [Naming]
#   isJavaNameOfTableSameAsDbName: (Default 'false')
#     [true]
#       Java name of table is same as db name.
#         ex) If the table name is 'OrderDetail', then the java name is 'OrderDetail'.
# 
#     [false]
#         ex) If the table name is 'ORDER_DETAIL', then the java name is 'OrderDetail'.
#         ex) If the table name is 'OrderDetail', then the java name is 'Orderdetail'.
#
#   isJavaNameOfColumnSameAsDbName: (Default 'false')
#     [true]
#       Java name of column is same as db name.
#         ex) If the table name is 'OrderDetail', then the java name is 'OrderDetail'.
# 
#     [false]
#         ex) If the table name is 'ORDER_DETAIL', then the java name is 'OrderDetail'.
#         ex) If the table name is 'OrderDetail', then the java name is 'Orderdetail'.
#
# @FirstProperty
#torque.isJavaNameOfTableSameAsDbName = false
#
# @FirstProperty
#torque.isJavaNameOfColumnSameAsDbName = false
# ----------------/

# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
#                                                           Prefix
#                                                         _/_/_/_/
# /---------------------------------------------------------------------------
# [PrefixAndSuffix]
#   projectPrefix: (Default null)
#     If the property is 'Ld', all class names are 'LdXxx'.
#
# @FirstProperty
#torque.projectPrefix = Ld
# ----------------/

# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
#                                                            Dicon
#                                                             _/_/
# /---------------------------------------------------------------------------
# [Dicon Basic Information]
#   dbfluteDiconNamespace: (Default Java:'dbflute' CSharp:'DBFlute')
#     The namespace of dbflute dicon.
#
#   dbfluteDiconPackageName: (Default Java:'../resources' CSharp:'../source/[top-namespace]/Resources')
#     The package name of dbflute dicon.
#
#   dbfluteDiconFileName: (Default Java:'dbflute.dicon' CSharp:'DBFlute.dicon')
#     The file name of dbflute dicon. (Required)
#
#   j2eeDiconResourceName: (Default Java:'j2ee.dicon' CSharp:'Ado.dicon')
#     The resource name of J2EE dicon.
#
#   *Attension:
#      It is necessary that main dicon of application includes dbflute dicon.
#      ex) App dicon includes dbflute dicon.
#
# @FirstProperty
#torque.dbfluteDiconNamespace		= dbflute
#torque.dbfluteDiconPackageName		= ../resources
#torque.dbfluteDiconFileName		= dbflute.dicon
#torque.j2eeDiconResourceName		= j2ee.dicon
# ----------------/

# /---------------------------------------------------------------------------
# [Dicon Adjustment Information]
#
#   dbfluteDiconBeforeJ2eeIncludeDefinitionMap: (Default 'map:{}')
#     The definition map of dbflute dicon include path before j2ee including.
#     ex) map:{ jdbc-xxx.dicon = dummy }
#
#   dbfluteDiconOtherIncludeDefinitionMap: (Default 'map:{}')
#     The definition map of dbflute dicon other include path.
#     ex) map:{ common.dicon = dummy }
#
#torque.dbfluteDiconBeforeJ2eeIncludeDefinitionMap = map:{}
#torque.dbfluteDiconOtherIncludeDefinitionMap = map:{}
# ----------------/

# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
#                                                          Package
#                                                             _/_/
# /---------------------------------------------------------------------------
# [EntityDao Package]
#    packageBase: (Default '')
#      The base directory of package.
#
#      *If this property is specified and other package properties is not specified, 
#       Then The packages of generated class are as follows:
#
#        ex) packageBase = org.seasar.dbflute.example.dbflute.ldb
#              baseCommonPackage       --> org.seasar.dbflute.example.dbflute.ldb.allcommon
#              baseBehaviorPackage     --> org.seasar.dbflute.example.dbflute.ldb.bsbhv
#              baseDaoPackage          --> org.seasar.dbflute.example.dbflute.ldb.bsdao
#              baseEntityPackage       --> org.seasar.dbflute.example.dbflute.ldb.bsentity
#              conditionBeanPackage    --> org.seasar.dbflute.example.dbflute.ldb.cbean
#              extendedBehaviorPackage --> org.seasar.dbflute.example.dbflute.ldb.exbhv
#              extendedDaoPackage      --> org.seasar.dbflute.example.dbflute.ldb.exdao
#              extendedEntityPackage   --> org.seasar.dbflute.example.dbflute.ldb.exentity
#
#      *If this property is not specified, you should specify the other package properties.
#
#
#    baseCommonPackage:       (Default Java:'allcommon' C#:'allcommon')
#    baseBehaviorPackage:     (Default Java:'bsbhv'     C#:'bsbhv')
#    baseDaoPackage:          (Default Java:'bsdao'     C#:'bsdao')
#    baseEntityPackage:       (Default Java:'bsentity'  C#:'bsentity')
#    conditionBeanPackage:    (Default Java:'cbean'     C#:'cbean')
#    extendedBehaviorPackage: (Default Java:'exbhv'     C#:'exbhv')
#    extendedDaoPackage:      (Default Java:'exdao'     C#:'exdao')
#    extendedEntityPackage:   (Default Java:'exentity'  C#:'exentity')
#
# @FirstProperty
torque.packageBase = com.example.dbflute.basic.dbflute
# ----------------/

# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
#                                                 S2Dao Adjustment
#                                                     _/_/_/_/_/_/
# /---------------------------------------------------------------------------
# [S2Dao Version]
#   s2daoVersion: (Default [The latest version])
#
# @FirstProperty
# @JavaOnly
#torque.s2daoVersion = 1.0.47
# ----------------/

# /---------------------------------------------------------------------------
# [S2Dao Component]
#   extendedDaoMetaDataFactoryImplClassName: (Default [The class that dbflute provides])
#     Your original DaoMetaDataFactory.
#
#   extendedAnnotationReaderFactoryClassName: (Default [The class that dbflute provides)
#     Your original AnnotationReaderFactory.
#
# @JavaOnly
#torque.extendedDaoMetaDataFactoryImplClassName = com.example.dbflute.basic.custom.MyDaoMetaDataFactoryImpl
#torque.extendedAnnotationReaderFactoryClassName = com.example.dbflute.basic.custom.MyAnnotationReaderFactory
# ----------------/

# /---------------------------------------------------------------------------
# [S2Dao Component]
#   daoSqlFileEncoding: (Default 'UTF-8')
#     Your original encoding of sql file for dao.
#
# @JavaOnly
#torque.daoSqlFileEncoding = UTF-8
# ----------------/

# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
#                                                         Adavance
#                                                             _/_/
# /--------------------------------------------------------------------------
# [Optimistic Lock]
#   updateDateFieldName: (Default null)
#     The field name of update-date. 
#     For example, if this property is 'UPDATE_DATE',
#     the annotation is generated as follows:
#       public static final String TIMESTAMP_PROPERTY = "updateDate";
#
#   updateDateExceptTableList: (Default list:{})
#     The tables are out-of-target of 'updateDateFieldName'.
#       ex) list:{ prefix:LB_ }
#
#   versionNoFieldName: (Default 'VERSION_NO')
#     The field name of version-no. 
#     For example, if this property id 'VERSION_NO'
#     the annotation is generated as follows:
#       public static final String VERSION_NO_PROPERTY = "versionNo";
#
#torque.updateDateFieldName          = U_TIMESTAMP
#torque.updateDateExceptTableList    = list:{ prefix:LB_ }
#torque.versionNoFieldName           = VERSION_NO
# ----------------/

# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
#                                                    Making Option
#                                                         _/_/_/_/
# /---------------------------------------------------------------------------
# [Making Option]
#   isMakeDeprecated: (Default 'false')
#     [true]
#       Make deprecated method and class and so on...
#       *You shuold set this property FALSE!
#
#   isMakeRecentlyDeprecated: (Default 'true')
#     [true]
#       Make RECENTLY deprecated method and class and so on...
#       *You shuold set this property FALSE!
#
#   isMakeConditionQueryEqualEmptyString: (Default 'false')
#     [true]
#       Make equal empty-string method of condition-query.
#
#   isMakeBehaviorCopyInsert: (Default 'false')
#     [true]
#       Make copy insert method of behavior.
#
#   isMakeBehaviorLoopUpdate: (Default 'false')
#     [true]
#       Make loop update method of behavior.
#
#   isMakeTraceablePreparedStatement: (Default 'false')
#     [true]
#       Make traceable prepared statement.
#
#torque.isMakeDeprecated = true
#torque.isMakeRecentlyDeprecated = true
#torque.isMakeConditionQueryEqualEmptyString = true

# @JavaOnly
#torque.isMakeBehaviorCopyInsert = true
#torque.isMakeBehaviorLoopUpdate = true
# ----------------/

# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
#                                                Little Adjustment
#                                                     _/_/_/_/_/_/
# /---------------------------------------------------------------------------
# [Delete Old Table Class] (Default 'false')
#   [true]
#     Delete old table class when generate and sql2entity.
#
#   [false]
#     Non.
#
# @JavaOnly
torque.isDeleteOldTableClass = true
# ----------------/

# /---------------------------------------------------------------------------
# [Non PrimaryKey Writable] (Default 'false')
#   [true]
#     Generate writable method at Non PrimaryKey Table.
#
#   [false]
#     Non.
#
# @JavaOnly
#torque.isAvailableNonPrimaryKeyWritable = true
# ----------------/

# /---------------------------------------------------------------------------
# [Adding Schema To TableSqlName] (Default 'false')
#   [true]
#     Add schema to table sql-name.
#
#   [false]
#     Non.
#
# @JavaOnly
#torque.isAvailableAddingSchemaToTableSqlName = true
# ----------------/

# /---------------------------------------------------------------------------
# [Database Dependency] (Default 'false')
#   [true]
#     Generate the method that depends on the database.
#     For example, cb.lockWithRR() at DB2.
#
#   [false]
#     Non.
#
# @JavaOnly
#torque.isAvailableDatabaseDependency = true
# ----------------/



# ========================================================================================
#                                                                            for JDBC task
#                                                                            =============

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# [Database Informaition]
# 
#   * * * * * * * * * * * * * * * * * * * * * * * * *
#   You shuold use './dfprop/databaseInfoMap.dfprop'
#   Look the file!
#   * * * * * * * * * * * * * * * * * * * * * * * * *
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -



# ========================================================================================
#                                                                             for Internal
#                                                                             ============
# Normally you don't need to change these properties.

#
# [JDBC to application-native mapping] (NotRequired - Default 'map:{}')
#
# ex) map:{INTEGER=java.lang.Integer;TIMESTAMP=java.util.Date}
# ex) map:{} // If you don't want to change...
#
# Abount '$$AutoMapping$$':
# If the database is Oracle, they often use this.
# For example, if you use this for NUMERIC.
#   Numeric( 1 -  9 , 0) is mapping to INTEGER
#   Numeric(10 - 38 , 0) is mapping to BIGINT
#   Numeric( 1 - 38 , 2) is mapping to NUMERIC
#
# Default mapping as follows:
# * ----------------------------------------------------
# * JDBC Type     | Java Type            | CSharp Type |
# * ----------------------------------------------------
# * CHAR          | java.lang.String     | String      |
# * VARCHAR       | java.lang.String     | String      |
# * LONGVARCHAR   | java.lang.String     | String      |
# * NUMERIC       | java.math.BigDecimal | decimal?    |
# * DECIMAL       | java.math.BigDecimal | decimal?    |
# * BIT           | java.lang.Boolean    | bool?       |
# * BOOLEAN       | java.lang.Boolean    | bool?       |
# * TINYINT       | java.lang.Integer    | int?        |
# * SMALLINT      | java.lang.Integer    | int?        |
# * INTEGER       | java.lang.Integer    | int?        |
# * BIGINT        | java.lang.Long       | long?       |
# * REAL          | java.math.BigDecimal | decimal?    |
# * FLOAT         | java.math.BigDecimal | decimal?    |
# * DOUBLE        | java.math.BigDecimal | decimal?    |
# * BINARY        | byte[]               | byte[]      |
# * VARBINARY     | byte[]               | byte[]      |
# * LONGVARBINARY | byte[]               | byte[]      |
# * DATE          | java.util.Date       | DateTime?   |
# * TIME          | java.sql.Time        | DateTime?   |
# * TIMESTAMP     | java.sql.Timestamp   | DateTime?   |
# * ----------------------------------------------------
#torque.jdbcToJavaNativeMap = map:{NUMERIC=$$AutoMapping$$;DECIMAL=$$AutoMapping$$}