${database.allClassCopyright}package ${glPackageBaseCommonBhvCoreCommand};

import org.seasar.extension.jdbc.ResultSetHandler;

import ${glPackageBaseCommonBhvCore}.${glSqlExecution};
import ${glPackageBaseCommonBhvCore}.${glSqlExecutionCreator};
import ${glPackageBaseCommonCBean}.${glConditionBeanInterfaceName};
import ${glPackageBaseCommonCBeanOutsidesql}.${glOutsideSqlOptionName};
import ${glPackageBaseCommonDBMeta}.${glDBMetaInterfaceName};
import ${glPackageBaseCommonDBMeta}.${glDBMetaInstanceHandlerName};

/**
 * @author ${database.ClassAuthor}
 */
public class ${glSelectNextValCommand} extends ${glAbstractBehaviorCommand} {

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    /** The type of entity. (Required) */
    protected Class<?> _entityType;

    // ===================================================================================
    //                                                                   Basic Information
    //                                                                   =================
    public String getCommandName() {
        return "selectNextVal";
    }

    public Class<?> getCommandReturnType() {
        return _entityType;
    }

    // ===================================================================================
    //                                                                  Detail Information
    //                                                                  ==================
    public boolean isConditionBean() {
        return false;
    }

    public boolean isOutsideSql() {
        return false;
    }

    public boolean isProcedure() {
        return false;
    }

    public boolean isSelect() {
        return true;
    }

    public boolean isSelectCount() {
        return false;
    }

    // ===================================================================================
    //                                                                    Process Callback
    //                                                                    ================
    public void beforeGettingSqlExecution() {
    }

    public void afterExecuting() {
    }

    // ===================================================================================
    //                                                               SqlExecution Handling
    //                                                               =====================
    public String buildSqlExecutionKey() {
        assertStatus("buildSqlExecutionKey");
        return _tableDbName + ":" + getCommandName() + "()";
    }

    public ${glSqlExecutionCreator} createSqlExecutionCreator() {
        assertStatus("createSqlExecutionCreator");
        return new ${glSqlExecutionCreator}() {
            public ${glSqlExecution} createSqlExecution() {
                ResultSetHandler handler = createObjectResultSetHandler(_entityType);
                return createSelectNextValExecution(handler);
            }
        };
    }

    protected ${glSqlExecution} createSelectNextValExecution(ResultSetHandler handler) {
        final ${glDBMetaInterfaceName} dbmeta = findDBMeta();
        if (!dbmeta.hasSequence()) {
            String msg = "If the method 'selectNextVal()' exists, DBMeta.hasSequence() should return true:";
            msg = msg + " dbmeta.hasSequence()=" + dbmeta.hasSequence();
            throw new IllegalStateException(msg);
        }
        final String nextValSql = dbmeta.getSequenceNextValSql();
        if (nextValSql == null) {
            String msg = "If the method 'selectNextVal()' exists, DBMeta.getSequenceNextValSql() should not return null:";
            msg = msg + " dbmeta.getSequenceNextValSql()=" + dbmeta.getSequenceNextValSql();
            throw new IllegalStateException(msg);
        }
        return createSelectDynamicCommand(handler, new String[]{}, new Class<?>[]{}, null);
    }

    protected ${glDBMetaInterfaceName} findDBMeta() {
        return ${glDBMetaInstanceHandlerName}.findDBMeta(_tableDbName);
    }

    public Object[] getSqlExecutionArgument() {
        assertStatus("getSqlExecutionArgument");
        return new Object[]{};
    }

    // ===================================================================================
    //                                                                Argument Information
    //                                                                ====================
    public ${glConditionBeanInterfaceName} getConditionBean() {
        return null;
    }

    public String getOutsideSqlPath() {
        return null;
    }

    public ${glOutsideSqlOptionName} getOutsideSqlOption() {
        return null;
    }

    // ===================================================================================
    //                                                                       Assert Helper
    //                                                                       =============
    protected void assertStatus(String methodName) {
        assertBasicProperty(methodName);
        assertComponentProperty(methodName);
    }

    // ===================================================================================
    //                                                                            Accessor
    //                                                                            ========
    public void setEntityType(Class<?> entityType) {
        _entityType = entityType;
    }
}
