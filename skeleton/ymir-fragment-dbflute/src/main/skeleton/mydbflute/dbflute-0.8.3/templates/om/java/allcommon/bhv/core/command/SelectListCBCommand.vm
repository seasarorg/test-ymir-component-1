${database.allClassCopyright}package ${glPackageBaseCommonBhvCoreCommand};

import java.util.List;

import org.seasar.extension.jdbc.ResultSetHandler;
import org.seasar.dao.BeanMetaData;

import ${glPackageBaseCommon}.${glEntityInterfaceName};
import ${glPackageBaseCommonBhvCore}.${glSqlExecution};
import ${glPackageBaseCommonBhvCore}.${glSqlExecutionCreator};
import ${glPackageBaseCommonBhvCoreExecution}.${glSelectCBExecution};
import ${glPackageBaseCommonCBean}.${glConditionBeanInterfaceName};
import ${glPackageBaseCommonCBean}.${glConditionBeanContextName};
import ${glPackageBaseCommonCBean}.${glFetchNarrowingBeanContextName};
import ${glPackageBaseCommonCBeanOutsidesql}.${glOutsideSqlOptionName};

/**
 * @author ${database.ClassAuthor}
 */
public class ${glSelectListCBCommand} extends ${glAbstractBehaviorCommand} {

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    /** The type of entity. (Required) */
    protected Class<? extends ${glEntityInterfaceName}> _entityType;

    /** The type of condition-bean. (Derived from conditionBean) */
    protected Class<? extends ${glConditionBeanInterfaceName}> _conditionBeanType;

    /** The instance of condition-bean. (Required) */
    protected ${glConditionBeanInterfaceName} _conditionBean;

    // ===================================================================================
    //                                                                   Basic Information
    //                                                                   =================
    public String getCommandName() {
        return "selectList";
    }

    public Class<?> getCommandReturnType() {
        return List.class;
    }

    // ===================================================================================
    //                                                                  Detail Information
    //                                                                  ==================
    public boolean isConditionBean() {
        return true;
    }

    public boolean isOutsideSql() {
        return false;
    }

    public boolean isProcedure() {
        return false;
    }

    public boolean isSelect() {
        return true;
    }

    public boolean isSelectCount() {
        return false;
    }

    // ===================================================================================
    //                                                                    Process Callback
    //                                                                    ================
    public void beforeGettingSqlExecution() {
        assertStatus("beforeGettingSqlExecution");
        final ${glConditionBeanInterfaceName} cb = _conditionBean;
        if (isSelectCount()) {
            cb.xsetupSelectCountIgnoreFetchScope();
        } else {
            ${glFetchNarrowingBeanContextName}.setFetchNarrowingBeanOnThread(cb);
        }
        ${glConditionBeanContextName}.setConditionBeanOnThread(cb);
    }

    public void afterExecuting() {
        assertStatus("afterExecuting");
        final ${glConditionBeanInterfaceName} cb = _conditionBean;
        if (isSelectCount()) {
            cb.xafterCareSelectCountIgnoreFetchScope();
        }
    }

    // ===================================================================================
    //                                                               SqlExecution Handling
    //                                                               =====================
    public String buildSqlExecutionKey() {
        assertStatus("buildSqlExecutionKey");
        return _tableDbName + ":" + getCommandName() + "(" + _conditionBeanType.getSimpleName() + ")";
    }

    public ${glSqlExecutionCreator} createSqlExecutionCreator() {
        assertStatus("createSqlExecutionCreator");
        return new ${glSqlExecutionCreator}() {
            public ${glSqlExecution} createSqlExecution() {
                BeanMetaData bmd = createBeanMetaData();
                ResultSetHandler handler = createBeanListMetaDataResultSetHandler(bmd);
                return createSelectCBExecution(_conditionBeanType, handler);
            }
        };
    }

    protected BeanMetaData createBeanMetaData() {
        return _beanMetaDataFactory.createBeanMetaData(_entityType);
    }

    protected ${glSqlExecution} createSelectCBExecution(Class<? extends ${glConditionBeanInterfaceName}> cbType, ResultSetHandler handler) {
        return createSelectCBExecution(handler, new String[] { "dto" }, new Class<?>[] { cbType });
    }

    protected ${glSelectCBExecution} createSelectCBExecution(ResultSetHandler handler, String[] argNames, Class<?>[] argTypes) {
        final ${glSelectCBExecution} cmd = new ${glSelectCBExecution}(_dataSource, _statementFactory, handler);
        cmd.setArgNames(argNames);
        cmd.setArgTypes(argTypes);
        return cmd;
    }

    public Object[] getSqlExecutionArgument() {
        assertStatus("getSqlExecutionArgument");
        return new Object[] { _conditionBean };
    }

    // ===================================================================================
    //                                                                Argument Information
    //                                                                ====================
    public ${glConditionBeanInterfaceName} getConditionBean() {
        return _conditionBean;
    }

    public String getOutsideSqlPath() {
        return null;
    }

    public ${glOutsideSqlOptionName} getOutsideSqlOption() {
        return null;
    }

    // ===================================================================================
    //                                                                       Assert Helper
    //                                                                       =============
    protected void assertStatus(String methodName) {
        assertBasicProperty(methodName);
        assertComponentProperty(methodName);
        if (_conditionBeanType == null) {
            throw new IllegalStateException(buildAssertMessage("_conditionBeanType", methodName));
        }
        if (_conditionBean == null) {
            throw new IllegalStateException(buildAssertMessage("_conditionBean", methodName));
        }
    }

    // ===================================================================================
    //                                                                            Accessor
    //                                                                            ========
    public void setEntityType(Class<? extends ${glEntityInterfaceName}> entityType) {
        _entityType = entityType;
    }

    public void setConditionBeanType(Class<? extends ${glConditionBeanInterfaceName}> conditionBeanType) {
        _conditionBeanType = conditionBeanType;
    }

    public void setConditionBean(${glConditionBeanInterfaceName} conditionBean) {
        _conditionBean = conditionBean;
    }
}
